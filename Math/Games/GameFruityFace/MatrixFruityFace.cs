using MathBaseProject.BaseMathData;
using MathForGames.BasicGameData;
using RNGUtils.RandomData;

namespace GameFruityFace
{
    public class MatrixFruityFace : Matrix
    {
        private static readonly int[][][] _Reels =
        {
            new[]
            {
                new[]{4, 4, 4, 3, 3, 4, 3, 4, 3, 3, 0, 5, 5, 5, 6, 6, 6, 1, 1, 1, 5, 1, 5, 5, 0, 5, 5, 6, 6, 2, 2, 3, 2, 2, 1, 1, 3, 3, 3},
                new[]{6, 6, 6, 1, 1, 0, 1, 1, 3, 3, 5, 5, 0, 5, 5, 1, 1, 3, 3, 3, 2, 2, 1, 2, 3, 3, 0, 3, 4, 4, 3, 4, 4, 6, 0, 6, 5, 5, 5},
                new[]{4, 4, 4, 2, 2, 4, 4, 2, 5, 0, 5, 5, 5, 4, 4, 4, 6, 6, 0, 6, 6, 2, 6, 2, 2, 4, 2, 2, 4, 4, 0, 3, 3, 3, 1, 1, 6, 1, 6, 6, 6},
                new[]{5, 5, 5, 3, 4, 4, 1, 1, 6, 1, 6, 6, 6, 3, 6, 3, 4, 4, 4, 3, 3, 3, 0, 3, 3, 4, 4, 4, 0, 5, 5, 5, 2, 2, 3, 2, 2},
                new[]{4, 0, 4, 4, 4, 4, 2, 2, 0, 6, 6, 6, 1, 1, 5, 1, 5, 5, 5, 4, 4, 4, 0, 4, 6, 6, 3, 6, 3, 3, 3, 3, 5, 3, 5, 5, 5, 2, 5}
            },
            new[]
            {
                new[]{4, 4, 3, 4, 3, 4, 4, 0, 5, 5, 5, 4, 4, 4, 3, 3, 3, 1, 1, 4, 1, 1, 6, 6, 6, 2, 2, 2, 5, 2, 5, 5, 0, 5, 5, 6, 6, 2, 2},
                new[]{1, 1, 2, 1, 4, 4, 2, 2, 5, 5, 0, 5, 5, 6, 6, 6, 4, 4, 0, 4, 3, 3, 4, 3, 3, 6, 0, 6, 5, 5, 5, 4, 4, 4, 2, 2, 0, 2, 2},
                new[]{2, 2, 6, 2, 6, 6, 6, 1, 1, 3, 1, 1, 3, 3, 0, 4, 4, 4, 3, 3, 3, 6, 6, 0, 6, 6, 1, 6, 3, 3, 3, 1, 1, 3, 3, 1, 5, 0, 5, 5, 5},
                new[]{2, 2, 6, 2, 6, 6, 6, 4, 6, 4, 1, 1, 4, 1, 1, 3, 3, 3, 0, 5, 5, 5, 3, 3, 3, 4, 4, 4, 0, 4, 4, 5, 5, 5, 4, 3, 3},
                new[]{3, 3, 3, 2, 2, 5, 2, 5, 5, 5, 1, 5, 1, 1, 0, 6, 6, 6, 3, 0, 3, 3, 3, 3, 0, 3, 6, 6, 4, 6, 4, 4, 4, 4, 5, 4, 5, 5, 5}
            },
            new[]
            {
                new[]{4, 4, 4, 3, 3, 4, 3, 4, 3, 3, 0, 5, 5, 5, 0, 6, 6, 6, 1, 1, 1, 5, 1, 5, 5, 0, 5, 5, 6, 6, 2, 2, 3, 2, 2, 1, 1, 3, 3, 3},
                new[]{6, 6, 6, 1, 1, 0, 1, 1, 3, 3, 5, 5, 0, 5, 5, 1, 1, 3, 3, 3, 2, 2, 1, 2, 3, 3, 0, 3, 4, 4, 3, 4, 4, 6, 0, 6, 5, 5, 5},
                new[]{4, 4, 4, 2, 2, 4, 4, 2, 5, 0, 5, 5, 5, 4, 4, 4, 6, 6, 0, 6, 6, 2, 6, 2, 2, 0, 2, 2, 4, 4, 0, 3, 3, 3, 1, 1, 6, 1, 6, 6, 6},
                new[]{5, 5, 5, 3, 4, 4, 1, 1, 6, 1, 6, 6, 6, 3, 6, 3, 4, 4, 4, 3, 3, 3, 0, 3, 3, 4, 4, 4, 0, 5, 5, 5, 2, 2, 3, 2, 2, 0},
                new[]{4, 0, 4, 4, 4, 4, 2, 2, 0, 6, 6, 6, 1, 1, 5, 1, 5, 5, 5, 4, 4, 4, 0, 4, 6, 6, 3, 6, 3, 3, 3, 3, 5, 3, 5, 5, 5, 2, 5}
            },
            new[]
            {
                new[]{4, 4, 3, 4, 3, 4, 4, 0, 5, 5, 5, 4, 4, 4, 0, 3, 3, 3, 1, 1, 4, 1, 1, 6, 6, 6, 2, 2, 2, 5, 2, 5, 5, 0, 5, 5, 6, 6, 2, 2},
                new[]{1, 1, 2, 1, 4, 4, 2, 2, 5, 5, 0, 5, 5, 6, 6, 6, 4, 4, 0, 4, 3, 3, 4, 3, 3, 6, 0, 6, 5, 5, 5, 4, 4, 4, 2, 2, 0, 2, 2},
                new[]{2, 2, 6, 2, 6, 6, 6, 1, 1, 0, 1, 1, 3, 3, 0, 4, 4, 4, 3, 3, 3, 6, 6, 0, 6, 6, 1, 6, 3, 3, 3, 1, 1, 3, 3, 1, 5, 0, 5, 5, 5},
                new[]{2, 2, 6, 2, 6, 6, 6, 4, 6, 4, 1, 1, 4, 1, 1, 3, 3, 3, 0, 5, 5, 5, 3, 3, 3, 4, 4, 4, 0, 4, 4, 5, 5, 5, 4, 3, 3, 0},
                new[]{3, 3, 3, 2, 2, 5, 2, 5, 5, 5, 1, 5, 1, 1, 0, 6, 6, 6, 3, 0, 3, 3, 3, 3, 0, 3, 6, 6, 4, 6, 4, 4, 4, 4, 5, 4, 5, 5, 5}
            }
        };

        private static readonly double[] _ReelProbs = { 0.463639, 0.463639, 0.036361, 0.036361 };

        public static readonly int[,] WinForLinesFruityFace =
        {
            {0, 0, 100, 1000, 5000},
            {0, 0, 50, 200, 1000},
            {0, 0, 50, 200, 1000},
            {0, 0, 20, 100, 250},
            {0, 0, 20, 100, 250},
            {0, 0, 20, 100, 200},
            {0, 5, 20, 100, 200},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        };

        /// <summary>
        /// Računa dobitak linije.
        /// </summary>
        /// <param name="lineNumber">Broj linije.</param>
        /// <returns></returns>
        public override int CalculateWinLine(int lineNumber)
        {
            return GetLine(lineNumber, GlobalData.GameLineExtra).CalculateLineWin(WinForLinesFruityFace, null, -1, 1);
        }

        public static int[,] GetMatixArray()
        {
            var reelsSet = -1;
            var sum = 0.0;
            var rnd = SoftwareRng.Next();
            var n = _ReelProbs.Length;
            for (var i = 0; i < n; i++)
            {
                sum += _ReelProbs[i];
                if (rnd < sum)
                {
                    reelsSet = i;
                    break;
                }
            }
            var mat = new int[5, 5];
            for (var i = 0; i < 5; i++)
            {
                var l = _Reels[reelsSet][i].Length;
                var p = SoftwareRng.Next(l);
                for (var j = 0; j < 5; j++)
                {
                    mat[i, j] = _Reels[reelsSet][i][(p + j) % l];
                }
            }
            return mat;
        }
    }
}
