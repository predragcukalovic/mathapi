using MathBaseProject.BaseMathData;
using MathBaseProject.StructuresV3;
using MathCombination.CombinationData;
using MathForGames.BasicGameData;
using RNGUtils.RandomData;
using System.Collections.Generic;

namespace GameAgeOfRome
{
    public class MatrixAgeOfRome : Matrix
    {
        #region Reels

        private static readonly int[][][] _Reels =
        {
new[] //Max
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 7, 8, 3, 10, 6, 0, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 7, 8, 3, 10, 6, 0, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 9, 10}
},

new[] //NoWin1
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9},
new[]{6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 0, 0, 7, 8, 3, 10, 6, 0, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 0, 0, 9, 10}
},

new[] //NoWin2
{
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9},
new[]{6, 8, 2, 10, 10, 3, 6, 11, 8, 10},
new[]{6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 7, 8, 3, 10, 6, 0, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 0, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 0, 0, 9, 10}
},

new[] //NoWinGratis1
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9},
new[]{6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 0, 0, 7, 8, 3, 10, 6, 0, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 0, 0, 9, 10}
},

new[] //NoWinGratis2
{
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9},
new[]{6, 8, 2, 10, 10, 3, 6, 11, 8, 10},
new[]{6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 7, 8, 3, 10, 6, 0, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 0, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 0, 0, 9, 10}
},

new[] //LowWin1
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 0, 0, 7, 8, 3, 10, 6, 0, 0, 0, 10, 9},
new[]{5, 7, 9, 9, 5, 11, 7, 9, 6, 8, 10, 10, 6, 11, 8, 10, 6, 9, 10, 8, 7, 10, 8, 7, 9, 5, 9, 10},
new[]{6, 8, 10, 10, 6, 11, 8, 10, 5, 7, 9, 9, 5, 11, 7, 9, 5, 10, 9, 7, 8, 9, 7, 8, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 9, 10}
},

new[] //LowWin2
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 7, 8, 3, 10, 6, 0, 0, 0, 0, 0, 10, 9},
new[]{5, 7, 9, 9, 5, 11, 7, 9, 6, 8, 10, 10, 6, 11, 8, 10, 6, 9, 10, 8, 7, 10, 8, 7, 9, 5, 9, 10},
new[]{6, 8, 10, 10, 3, 6, 8, 10, 5, 7, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 7, 8, 3, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 0, 0, 9, 10}
},

new[] //LowWin3
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 7, 8, 3, 10, 6, 0, 0, 0, 0, 0, 10, 9},
new[]{5, 7, 9, 9, 4, 5, 7, 9, 6, 8, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 8, 7, 4, 9, 5, 9, 10},
new[]{6, 8, 10, 10, 6, 11, 8, 10, 5, 7, 9, 9, 5, 11, 7, 9, 5, 10, 9, 7, 8, 9, 7, 8, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 0, 0, 9, 10}
},

new[] //LowWin4
{
new[]{6, 8, 10, 10, 3, 6, 8, 10, 5, 7, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 7, 8, 3, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 0, 0, 9, 10},
new[]{6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 5, 10, 9, 4, 7, 8, 9, 7, 8, 3, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 8, 7, 4, 9, 5, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 8, 7, 4, 9, 5, 9, 10}
},

new[] //HighWin1
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 7, 8, 3, 10, 6, 0, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 9, 10},
new[]{6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 7, 8, 3, 10, 6, 0, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 8, 7, 4, 9, 5, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 8, 7, 4, 9, 5, 9, 10}
},

new[] //HighWin2
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 7, 8, 3, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 8, 7, 4, 9, 5, 9, 10},
new[]{6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 5, 10, 9, 4, 7, 8, 9, 7, 8, 3, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 0, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 0, 0, 9, 10}
},

new[] //HighWin2a
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 7, 8, 3, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 8, 7, 4, 9, 5, 9, 10},
new[]{6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 5, 10, 9, 4, 7, 8, 9, 7, 8, 3, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 0, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 0, 0, 9, 10}
},

new[] //HighWin2b
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 7, 8, 3, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 8, 7, 4, 9, 5, 9, 10},
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 7, 8, 3, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 0, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 0, 0, 9, 10}
},

new[] //LowWinGratis
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 0, 0, 7, 8, 3, 10, 6, 0, 0, 0, 10, 9},
new[]{5, 7, 9, 9, 5, 11, 7, 9, 6, 8, 10, 10, 6, 11, 8, 10, 6, 9, 10, 8, 7, 10, 8, 7, 9, 5, 9, 10},
new[]{6, 8, 10, 10, 6, 11, 8, 10, 5, 7, 9, 9, 5, 11, 7, 9, 5, 10, 9, 7, 8, 9, 7, 8, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 0, 0, 9, 10}
}
};

        private static readonly int[][][] _ReelsRespin =
        {
new[] //Base
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 7, 8, 3, 10, 6, 0, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 5, 10, 9, 4, 7, 8, 9, 0, 7, 8, 3, 10, 6, 0, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 11, 7, 9, 6, 8, 2, 10, 10, 3, 6, 11, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 0, 8, 7, 4, 9, 5, 0, 9, 10}
},

new[] //Respin
{
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 7, 8, 3, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 8, 7, 4, 9, 5, 9, 10},
new[]{6, 8, 2, 10, 10, 3, 6, 8, 10, 5, 7, 1, 9, 9, 4, 5, 7, 9, 5, 10, 9, 4, 7, 8, 9, 7, 8, 3, 10, 6, 10, 9},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 8, 7, 4, 9, 5, 9, 10},
new[]{5, 7, 1, 9, 9, 4, 5, 7, 9, 6, 8, 2, 10, 10, 3, 6, 8, 10, 6, 9, 10, 3, 8, 7, 10, 8, 7, 4, 9, 5, 9, 10}
}
};

        private static readonly double[] _ReelProbs = { 0.001, 0.2, 0.2483, 0.131, 0.13, 0.015, 0.015, 0.015, 0.0155, 0.003, 0.0411, 0.039, 0.0361, 0.11 };
        private static readonly double[] _ReelProbsGratis = { 0.0, 0.15, 0.15, 0.1, 0.11, 0.015, 0.015, 0.015, 0.015, 0.0, 0.111, 0.109, 0.11, 0.1 };

        #endregion

        #region Public properties

        public static readonly int[,] WinForLinesAgeOfRome =
        {
            {0, 0, 0, 0, 0},
            {0, 20, 40, 60, 200},
            {0, 8, 16, 32, 80},
            {0, 0, 8, 16, 32},
            {0, 0, 4, 8, 24},
            {0, 0, 2, 6, 16},
            {0, 0, 2, 6, 16},
            {0, 0, 1, 4, 8},
            {0, 0, 1, 4, 8},
            {0, 0, 1, 2, 4},
            {0, 0, 1, 2, 4},
            {0, 0, 0, 0, 0}
        };
        public static readonly int[] WinForWildAgeOfRome = { 0, 20, 40, 60, 5000 };
        public static readonly int[] PlayLines = { 1 };

        public const int GRATIS_GAMES = 10;

        #endregion

        #region Public methods

        /// <summary>
        /// Računa dobitak linije.
        /// </summary>
        /// <param name="lineNumber">Broj linije.</param>
        /// <param name="winningElement"></param>
        /// <param name="winningPosition"></param>
        /// <returns></returns>
        public int CalculateWinLine(int lineNumber, out byte winningElement, out byte[] winningPosition, out byte wildMultiply)
        {
            wildMultiply = 1;
            var l = GetLine(lineNumber, GlobalData.GameLineExtra);
            var startWild = 0;
            var mult = 0;
            var firstNonWild = -1;
            var count = 0;
            for (var i = 0; i < 5; i++)
            {
                var elem = l.GetElement(i);
                if (elem > 0 && firstNonWild == -1)
                {
                    firstNonWild = elem;
                }
                if (elem == 0 && firstNonWild == -1)
                {
                    startWild++;
                }
                if (elem == 0)
                {
                    mult++;
                }
                if (firstNonWild != -1 && (elem != firstNonWild && elem != 0))
                {
                    break;
                }
                count = i + 1;
            }
            mult = 1 << (mult);
            if (firstNonWild == -1)
            {
                winningElement = 0;
                winningPosition = GetPositionArray(lineNumber, 5);
                return WinForWildAgeOfRome[4];
            }
            var wildWin = startWild == 0 ? 0 : WinForWildAgeOfRome[startWild - 1];
            var win = count == 0 ? 0 : WinForLinesAgeOfRome[firstNonWild, count - 1] * mult;
            if (wildWin > win)
            {
                winningElement = 0;
                winningPosition = GetPositionArray(lineNumber, startWild);
                return wildWin;
            }
            wildMultiply = (byte)mult;
            winningPosition = GetPositionArray(lineNumber, count);
            winningElement = (byte)firstNonWild;
            return win;
        }

        private byte[] GetPositionArray(int lineNumber, int lenght)
        {
            var pos = new List<byte>();
            for (var i = 0; i < lenght; i++)
            {
                pos.Add((byte)(GlobalData.GameLineExtra[lineNumber - 1, i] * 5 + i));
            }
            return pos.ToArray();
        }

        public LineInfo GetBonusLineInfo()
        {
            var pos = new List<byte>();
            for (var i = 1; i < 4; i++)
            {
                for (var j = 0; j < 3; j++)
                {
                    if (GetElement(i, j) == 11)
                    {
                        pos.Add((byte)(j * 5 + i));
                    }
                }
            }
            if (pos.Count >= 3)
            {
                return new LineInfo { Id = 254, Win = 0, WinningElement = 11, WinningPosition = pos.ToArray() };
            }
            return null;
        }

        public static int[,] GetMatixArray(bool gratisGame, byte respin)
        {
            var reelsSet = -1;
            var sum = 0.0;
            var rnd = SoftwareRng.Next();
            var reelProb = gratisGame ? _ReelProbsGratis : _ReelProbs;
            var n = reelProb.Length;
            for (var i = 0; i < n; i++)
            {
                sum += reelProb[i];
                if (rnd < sum)
                {
                    reelsSet = i;
                    break;
                }
            }
            //reelsSet = gratisGame ? reelsSet : 3;
            var reels = (respin == 1 || respin == 2) ? _ReelsRespin : _Reels;
            if (respin == 1)
            {
                reelsSet = 0;
            }
            else if (respin == 2)
            {
                reelsSet = 1;
            }
            var mat = new int[5, 3];
            for (var i = 0; i < 5; i++)
            {
                var l = reels[reelsSet][i].Length;
                var p = SoftwareRng.Next(l);
                for (var j = 0; j < 3; j++)
                {
                    mat[i, j] = reels[reelsSet][i][(p + j) % l];
                }
            }
            return mat;
        }

        #endregion

        #region V3 structs

        /// <summary>
        /// Vraća lažne rilove koji se koriste samo za prikaz okretanja
        /// </summary>
        /// <returns></returns>
        public static int[][] GetFakeReels()
        {
            var fakeReels = new int[5][];
            fakeReels[0] = new[] { 4, 7, 0, 8, 7, 5, 2, 7, 8, 0, 7, 5, 4, 10, 9, 9, 8, 0, 4, 10, 9, 9, 3, 1, 6, 7, 3, 8, 3, 6, 6, 0, 5, 8, 9, 9, 8, 0, 0, 0, 4, 10, 10, 0, 9, 9, 10, 6, 10, 1, 8, 10, 9, 10, 9, 0, 5, 2, 9, 7, 10, 5, 6, 7, 3, 8, 3, 6, 6, 5, 8, 9, 9, 8, 7, 5, 4, 10, 9, 9, 3, 1, 6, 7, 10, 8, 4, 7, 8, 7, 5, 4, 10, 9, 9, 3, 1, 6, 7, 10, 8 };
            fakeReels[1] = new[] { 7, 8, 0, 0, 0, 4, 10, 10, 0, 6, 10, 11, 1, 6, 7, 3, 8, 0, 6, 6, 5, 0, 8, 9, 9, 8, 7, 5, 2, 7, 8, 7, 5, 2, 9, 7, 10, 5, 6, 11, 7, 10, 3, 8, 3, 0, 6, 6, 5, 8, 9, 9, 8, 7, 5, 4, 10, 0, 9, 10, 0, 9, 9, 3, 11, 1, 6, 7, 3, 8, 4, 10, 10, 0, 9, 10, 9, 9, 10, 6, 10, 11, 1, 8, 10, 9, 0, 5, 2, 9, 7, 0, 10, 5, 6, 11, 7, 10, 8, 4, 7, 8, 4, 10, 0, 9, 9, 8, 7, 5, 2 };
            fakeReels[2] = new[] { 7, 5, 2, 9, 7, 10, 5, 6, 11, 7, 10, 8, 4, 7, 8, 0, 7, 5, 2, 7, 8, 4, 7, 8, 7, 5, 4, 10, 10, 0, 9, 9, 3, 11, 1, 6, 7, 3, 8, 3, 0, 6, 6, 5, 8, 9, 9, 8, 0, 9, 10, 9, 9, 3, 11, 1, 6, 7, 3, 8, 3, 0, 6, 6, 5, 8, 0, 0, 0, 4, 10, 10, 0, 9, 9, 10, 6, 10, 11, 1, 8, 10, 9, 0, 5, 2, 9, 7, 10, 8, 4, 10, 0, 9, 9, 8 };
            fakeReels[3] = new[] { 9, 9, 3, 11, 1, 6, 7, 3, 8, 3, 6, 6, 5, 0, 8, 9, 9, 3, 11, 1, 6, 7, 3, 8, 3, 0, 6, 6, 5, 8, 9, 9, 10, 9, 9, 8, 7, 5, 2, 7, 8, 4, 7, 8, 0, 7, 5, 2, 7, 8, 7, 5, 4, 10, 0, 9, 9, 8, 0, 0, 0, 4, 10, 10, 0, 9, 9, 10, 6, 10, 11, 1, 8, 10, 9, 0, 5, 2, 9, 7, 0, 10, 5, 6, 11, 7, 10, 8, 4, 10, 0, 9, 10, 0, 9, 9, 10, 9, 0, 5, 2, 9, 7, 10, 5, 6, 11, 7, 10, 8, 4, 10, 10, 0 };
            fakeReels[4] = new[] { 7, 8, 7, 5, 4, 10, 9, 0, 5, 2, 9, 7, 10, 5, 6, 7, 10, 5, 6, 0, 7, 10, 8, 4, 7, 8, 4, 10, 9, 9, 10, 0, 9, 9, 3, 1, 6, 7, 3, 8, 3, 6, 6, 5, 8, 9, 9, 8, 7, 5, 2, 7, 8, 0, 0, 0, 4, 10, 10, 0, 6, 10, 1, 8, 10, 9, 9, 10, 6, 10, 1, 8, 10, 9, 9, 10, 9, 10, 0, 9, 9, 3, 1, 6, 7, 3, 8, 3, 6, 6, 5, 0, 8, 9, 9, 10, 9, 0, 10, 9, 9, 8, 7, 5, 2 };
            return fakeReels;
        }

        /// <summary>
        /// Vraća niz koeficijenata za id simbola.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static int[] GetSymbolCoefficients(int id)
        {
            if (id == 0)
            {
                return WinForWildAgeOfRome;
            }
            var coefficients = new int[5];
            for (var i = 0; i < 5; i++)
            {
                coefficients[i] = WinForLinesAgeOfRome[id, i];
            }
            return coefficients;
        }

        public static HelpConfigV3<object> GetHelpConfigV3()
        {
            var helpV3 = new HelpConfigV3<object>
            {
                rtp = (decimal?)0.0,
                symbols = GetHelpSymbolConfigV3(),
                lines = GetHelpLineConfigV3()
            };

            return helpV3;
        }

        private static HelpSymbolConfigV3<object>[] GetHelpSymbolConfigV3()
        {
            var symbols = new HelpSymbolConfigV3<object>[12];
            for (var i = 0; i < 12; i++)
            {
                symbols[i] = new HelpSymbolConfigV3<object>
                {
                    id = i,
                    extra = new HelpSymbolExtraV3(),
                    coefficients = GetSymbolCoefficients(i),
                    features = new[] { HelpSymbolFeatureV3.Regular }
                };
            }

            return symbols;
        }

        private static HelpLineConfigV3[] GetHelpLineConfigV3()
        {
            var lines = new HelpLineConfigV3[20];
            for (var i = 0; i < 20; i++)
            {
                var pos = new int[5];
                for (var j = 0; j < 5; j++)
                {
                    pos[j] = GlobalData.GameLineExtra[i, j];
                }
                lines[i] = new HelpLineConfigV3 { id = i, positions = pos };
            }

            return lines;
        }

        #endregion
    }
}
