using MathBaseProject.StructuresV3;
using MathForGames.BasicGameData;
using MathForGames.GameTurboHot40;
using RNGUtils.RandomData;

namespace GameFruityForce
{
    public class MatrixFruityForce : MatrixTurboHot40
    {
        #region Reels

        private static readonly int[][][] _Reels =
{
    new[]{
        new[] { 8, 8, 8, 8, 3, 3, 3, 3, 7, 7, 7, 7, 7, 6, 6, 6, 6, 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4, 4, 4, 7, 7, 7, 7, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 4, 4, 4, 4, 2, 2, 2, 2, 8, 8, 8, 8, 5, 5, 5, 5, 7, 7, 7, 7, 7, 6, 6, 6, 6, 3, 3, 3, 3, 7, 7, 7, 7, 6, 6, 6, 6, 3, 3, 3, 3, 7, 7, 7, 7, 4, 4, 4, 4, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5, 5, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 0, 0, 0, 0, 4, 4, 4, 4, 6, 6, 6, 6, 1, 1, 1, 1, 5, 5, 5, 5, 6, 6, 6, 6, 4, 4, 4, 4, 7, 7, 7, 7, 7, 6, 6, 6, 6, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 5, 5, 5, 5, 7, 7, 7, 7 },
        new[] { 5, 5, 5, 5, 5, 3, 3, 3, 3, 1, 1, 1, 1, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 5, 5, 5, 5, 8, 8, 8, 8, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 7, 7, 7, 7, 4, 4, 4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 4, 4, 4, 4, 2, 2, 2, 2, 8, 8, 8, 8, 5, 5, 5, 5, 5, 3, 3, 3, 3, 6, 6, 6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 7, 7, 7, 7, 8, 8, 8, 8, 5, 5, 5, 5, 4, 4, 4, 4, 8, 8, 8, 8, 1, 1, 1, 6, 6, 6, 6, 1, 1, 1, 1, 8, 8, 8, 8, 2, 2, 2, 2, 5, 5, 5, 5, 0, 0, 0, 0, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
        new[] { 6, 6, 6, 6, 3, 3, 3, 3, 8, 8, 8, 8, 6, 6, 6, 6, 1, 1, 1, 1, 6, 6, 6, 6, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 6, 8, 8, 8, 8, 8, 6, 6, 6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 5, 5, 5, 5, 8, 8, 8, 8, 7, 7, 7, 7, 4, 4, 4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 4, 4, 4, 4, 2, 2, 2, 2, 8, 8, 8, 8, 1, 1, 1, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 5, 5, 5, 5, 7, 7, 7, 7, 5, 5, 5, 5, 1, 1, 1, 1, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 8, 8, 8, 5, 5, 5, 5, 6, 6, 6, 6, 0, 0, 0, 3, 3, 3, 3, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 4, 4, 4, 4, 2, 2, 2, 2, 0, 0, 0, 0, 7, 7, 7, 7 },
        new[] { 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 3, 3, 3, 3, 1, 1, 1, 1, 8, 8, 8, 8, 5, 5, 5, 5, 3, 3, 3, 3, 5, 5, 5, 5, 8, 8, 8, 8, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 4, 4, 4, 4, 2, 2, 2, 2, 8, 8, 8, 8, 8, 3, 3, 3, 3, 6, 6, 6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 7, 7, 7, 7, 8, 8, 8, 8, 5, 5, 5, 5, 4, 4, 4, 4, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 1, 1, 1, 1, 7, 7, 7, 7, 7, 8, 8, 8, 8, 6, 6, 6, 6, 2, 2, 2, 2, 0, 0, 0, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 5, 5, 5, 5, 3, 3, 3, 3, 0, 0, 0, 0, 7, 7, 7, 7 },
        new[] { 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 5, 5, 5, 5, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 8, 8, 8, 8, 5, 5, 5, 5, 3, 3, 3, 3, 5, 5, 5, 5, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5, 5, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 0, 0, 0, 4, 4, 4, 4, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 5, 5, 5, 5 }
    },
    new[]{
        new[] { 1, 1, 1, 1 },
        new[] { 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7 },
        new[] { 1, 1, 1, 1, 0, 0, 0, 0 },
        new[] { 0, 0, 0, 1, 1, 1, 1, 0 },
        new[] { 1, 1, 1, 1, 0, 0, 0, 0 }
    },
    new[]{
        new[] { 0, 0, 0, 0, 1, 1, 1, 1 },
        new[] { 1, 1, 1, 1 },
        new[] { 8, 8, 8, 8, 6, 6, 6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 7, 7, 7, 7, 4, 4, 4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 2, 2, 2, 2, 8, 8, 8, 8, 4, 4, 4, 4, 5, 5, 5, 5 },
        new[] { 0, 0, 0, 0, 1, 1, 1, 1 },
        new[] { 1, 1, 0, 0, 0, 0, 1, 1 }
    },
    new[]{
        new[] { 2, 2, 2, 2 },
        new[] { 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 4, 4, 4, 4, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7 },
        new[] { 2, 2, 2, 2, 0, 0, 0, 0 },
        new[] { 0, 0, 0, 2, 2, 2, 2, 0 },
        new[] { 2, 2, 2, 2, 0, 0, 0, 0 }
    },
    new[]{
        new[] { 0, 0, 0, 0, 2, 2, 2, 2 },
        new[] { 2, 2, 2, 2 },
        new[] { 8, 8, 8, 8, 6, 6, 6, 6, 5, 5, 5, 5, 3, 3, 3, 3, 7, 7, 7, 7, 4, 4, 4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 1, 1, 1, 1, 8, 8, 8, 8, 4, 4, 4, 4, 5, 5, 5, 5 },
        new[] { 0, 0, 0, 0, 2, 2, 2, 2 },
        new[] { 2, 2, 0, 0, 0, 0, 2, 2 }
    },
    new[]{
        new[] { 3, 3, 3, 3 },
        new[] { 5, 5, 5, 5, 2, 2, 2, 2, 8, 8, 8, 8, 1, 1, 1, 1, 4, 4, 4, 4, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7 },
        new[] { 3, 3, 3, 3, 0, 0, 0, 0 },
        new[] { 0, 0, 0, 3, 3, 3, 3, 0 },
        new[] { 3, 3, 3, 3, 0, 0, 0, 0 }
    },
    new[]{
        new[] { 0, 0, 0, 0, 3, 3, 3, 3 },
        new[] { 3, 3, 3, 3 },
        new[] { 8, 8, 8, 8, 6, 6, 6, 6, 5, 5, 5, 5, 2, 2, 2, 2, 7, 7, 7, 7, 4, 4, 4, 4, 6, 6, 6, 6, 7, 7, 7, 7, 1, 1, 1, 1, 8, 8, 8, 8, 4, 4, 4, 4, 5, 5, 5, 5 },
        new[] { 0, 0, 0, 0, 3, 3, 3, 3 },
        new[] { 3, 3, 0, 0, 0, 0, 3, 3 }
    },
    new[]{
        new[] { 4, 4, 4, 4 },
        new[] { 5, 5, 5, 5, 2, 2, 2, 2, 8, 8, 8, 8, 1, 1, 1, 1, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7 },
        new[] { 4, 4, 4, 4, 0, 0, 0, 0 },
        new[] { 0, 0, 0, 4, 4, 4, 4, 0 },
        new[] { 4, 4, 4, 4, 0, 0, 0, 0 }
    },
    new[]{
        new[] { 0, 0, 0, 0, 4, 4, 4, 4 },
        new[] { 4, 4, 4, 4 },
        new[] { 8, 8, 8, 8, 6, 6, 6, 6, 5, 5, 5, 5, 2, 2, 2, 2, 7, 7, 7, 7, 3, 3, 3, 3, 6, 6, 6, 6, 7, 7, 7, 7, 1, 1, 1, 1, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5 },
        new[] { 0, 0, 0, 0, 4, 4, 4, 4 },
        new[] { 4, 4, 0, 0, 0, 0, 4, 4 }
    },
    new[]{
        new[] { 5, 5, 5, 5 },
        new[] { 4, 4, 4, 4, 2, 2, 2, 2, 8, 8, 8, 8, 1, 1, 1, 1, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7 },
        new[] { 5, 5, 5, 5, 0, 0, 0, 0 },
        new[] { 0, 0, 0, 5, 5, 5, 5, 0 },
        new[] { 5, 5, 5, 5, 0, 0, 0, 0 }
    },
    new[]{
        new[] { 0, 0, 0, 0, 5, 5, 5, 5 },
        new[] { 5, 5, 5, 5 },
        new[] { 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 2, 2, 2, 2, 7, 7, 7, 7, 3, 3, 3, 3, 6, 6, 6, 6, 7, 7, 7, 7, 1, 1, 1, 1, 8, 8, 8, 8, 4, 4, 4, 4, 1, 1, 1, 1 },
        new[] { 0, 0, 0, 0, 5, 5, 5, 5 },
        new[] { 5, 5, 0, 0, 0, 0, 5, 5 }
    },
    new[]{
        new[] { 6, 6, 6, 6 },
        new[] { 4, 4, 4, 4, 2, 2, 2, 2, 8, 8, 8, 8, 1, 1, 1, 1, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 7, 7, 7, 7 },
        new[] { 6, 6, 6, 6, 0, 0, 0, 0 },
        new[] { 0, 0, 0, 6, 6, 6, 6, 0 },
        new[] { 6, 6, 6, 6, 0, 0, 0, 0 }
    },
    new[]{
        new[] { 0, 0, 0, 0, 6, 6, 6, 6 },
        new[] { 6, 6, 6, 6 },
        new[] { 8, 8, 8, 8, 5, 5, 5, 5, 4, 4, 4, 4, 2, 2, 2, 2, 7, 7, 7, 7, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 1, 1, 1, 1, 8, 8, 8, 8, 4, 4, 4, 4, 5, 5, 5, 5 },
        new[] { 0, 0, 0, 0, 6, 6, 6, 6 },
        new[] { 6, 6, 0, 0, 0, 0, 6, 6 }
    },
    new[]{
        new[] { 7, 7, 7, 7 },
        new[] { 4, 4, 4, 4, 2, 2, 2, 2, 8, 8, 8, 8, 1, 1, 1, 1, 3, 3, 3, 3, 8, 8, 8, 8, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6 },
        new[] { 7, 7, 7, 7, 0, 0, 0, 0 },
        new[] { 0, 0, 0, 7, 7, 7, 7, 0 },
        new[] { 7, 7, 7, 7, 0, 0, 0, 0 }
    },
    new[]{
        new[] { 0, 0, 0, 0, 7, 7, 7, 7 },
        new[] { 7, 7, 7, 7 },
        new[] { 8, 8, 8, 8, 5, 5, 5, 5, 4, 4, 4, 4, 2, 2, 2, 2, 6, 6, 6, 6, 3, 3, 3, 3, 6, 6, 6, 6, 8, 8, 8, 8, 1, 1, 1, 1, 8, 8, 8, 8, 4, 4, 4, 4, 5, 5, 5, 5 },
        new[] { 0, 0, 0, 0, 7, 7, 7, 7 },
        new[] { 7, 7, 0, 0, 0, 0, 7, 7 }
    },
    new[]{
        new[] { 8, 8, 8, 8 },
        new[] { 4, 4, 4, 4, 2, 2, 2, 2, 7, 7, 7, 7, 1, 1, 1, 1, 3, 3, 3, 3, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6 },
        new[] { 8, 8, 8, 8, 0, 0, 0, 0 },
        new[] { 0, 0, 0, 8, 8, 8, 8, 0 },
        new[] { 8, 8, 8, 8, 0, 0, 0, 0 }
    },
    new[]{
        new[] { 0, 0, 0, 0, 8, 8, 8, 8 },
        new[] { 8, 8, 8, 8 },
        new[] { 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 2, 2, 2, 2, 6, 6, 6, 6, 3, 3, 3, 3, 6, 6, 6, 6, 7, 7, 7, 7, 1, 1, 1, 1, 7, 7, 7, 7, 4, 4, 4, 4, 5, 5, 5, 5 },
        new[] { 0, 0, 0, 0, 8, 8, 8, 8 },
        new[] { 8, 8, 0, 0, 0, 0, 8, 8 }
    }
};

        private static readonly double[][] _ReelProbs = new[]{
            new[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            new[] { 0.999, 0.0000625, 0.0000625, 0.0000625, 0.0000625, 0.0000625, 0.0000625, 0.0000625, 0.0000625, 0.0000625, 0.0000625, 0.0000625, 0.0000625, 0.0000625, 0.0000625, 0.0000625, 0.0000625 },
            new[] { 0.998, 0.000125, 0.000125, 0.000125, 0.000125, 0.000125, 0.000125, 0.000125, 0.000125, 0.000125, 0.000125, 0.000125, 0.000125, 0.000125, 0.000125, 0.000125, 0.000125 },
            new[] { 0.997, 0.0001875, 0.0001875, 0.0001875, 0.0001875, 0.0001875, 0.0001875, 0.0001875, 0.0001875, 0.0001875, 0.0001875, 0.0001875, 0.0001875, 0.0001875, 0.0001875, 0.0001875, 0.0001875 },
            new[] { 0.995, 0.0003125, 0.0003125, 0.0003125, 0.0003125, 0.0003125, 0.0003125, 0.0003125, 0.0003125, 0.0003125, 0.0003125, 0.0003125, 0.0003125, 0.0003125, 0.0003125, 0.0003125, 0.0003125 }
        };

        #endregion

        #region Public properties

        public static readonly int[,] WinForLinesFruityForce =
        {
            {0, 0, 0, 0, 0},
            {0, 0, 40, 200, 1000},
            {0, 0, 20, 100, 500},
            {0, 0, 15, 30, 100},
            {0, 0, 15, 30, 100},
            {0, 0, 10, 20, 50},
            {0, 0, 10, 20, 50},
            {0, 0, 10, 20, 50},
            {0, 0, 10, 20, 50},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0 }
        };
        public static readonly int[][] WinForWildFruityForce = { new[] { 0, 0, 40, 200, 1000 }, new[] { 0, 0, 80, 400, 2000 }, new[] { 0, 0, 120, 600, 3000 }, new[] { 0, 0, 400, 2000, 10000 }, new[] { 0, 0, 1000, 5000, 25000 } };
        public static readonly int[] PlayLines = { 40, 1 };

        public static readonly int[] LevelCount = { 120, 60, 30, 15, 5 };

        #endregion

        public int CalculateWinLine(int lineNumber, int level)
        {
            var mult = GetLevelMultiplicator(level);
            return GetLine(lineNumber, GlobalData.GameLineTurbo).CalculateLineWin(WinForLinesFruityForce, WinForWildFruityForce[level], 0, mult);
        }

        private int GetLevelMultiplicator(int level)
        {
            if (level == 3)
            {
                return 10;
            }
            if (level == 4)
            {
                return 25;
            }
            return level + 1;
        }

        public static int[,] GetMatixArray(int level)
        {
            var reelsSet = -1;
            var sum = 0.0;
            var rnd = SoftwareRng.Next();
            var n = _ReelProbs[level].Length;
            for (var i = 0; i < n; i++)
            {
                sum += _ReelProbs[level][i];
                if (rnd < sum)
                {
                    reelsSet = i;
                    break;
                }
            }
            var mat = new int[5, 6];
            for (var i = 0; i < 5; i++)
            {
                var l = _Reels[reelsSet][i].Length;
                var p = SoftwareRng.Next(l);
                for (var j = 0; j < 6; j++)
                {
                    mat[i, j] = _Reels[reelsSet][i][(p + j) % l];
                }
            }
            return mat;
        }

        public static int GetLevel(int gamesPlayed)
        {
            var s = 0;
            for (var i = 0; i < LevelCount.Length; i++)
            {
                s += LevelCount[i];
                if (gamesPlayed < s)
                {
                    return i;
                }
            }
            return -1;
        }

        public static int GetGamesPlayedInLevel(int gamesPlayed)
        {
            var s = 0;
            for (var i = 0; i < LevelCount.Length; i++)
            {
                s += LevelCount[i];
                if (gamesPlayed < s)
                {
                    return gamesPlayed - s + LevelCount[i];
                }
            }
            return -1;
        }

        public static int GetGamesNeededForLevel(int level) 
        {
            var s = 0;
            for (var i = 0; i < level + 1; i++)
            {
                s += LevelCount[i];
            }
            return s;
        }

        #region V3 structs

        /// <summary>
        /// Vraća lažne rilove koji se koriste samo za prikaz okretanja
        /// </summary>
        /// <returns></returns>
        public static int[][] GetFakeReels()
        {
            var fakeReels = new int[5][];
            fakeReels[0] = new[] { 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 0, 0, 0, 0, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 9, 9, 9, 9, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 10, 10, 10, 10, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 10, 10, 10, 10, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 11, 11, 11, 11, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 11, 11, 11, 11, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 12, 12, 12, 12, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 12, 12, 12, 12, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7 };
            fakeReels[1] = new[] { 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 0, 0, 0, 0, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 9, 9, 9, 9, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 10, 10, 10, 10, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 10, 10, 10, 10, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 11, 11, 11, 11, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 11, 11, 11, 11, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 12, 12, 12, 12, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 12, 12, 12, 12, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1 };
            fakeReels[2] = new[] { 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 0, 0, 0, 0, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 9, 9, 9, 9, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 10, 10, 10, 10, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 10, 10, 10, 10, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 11, 11, 11, 11, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 11, 11, 11, 11, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 12, 12, 12, 12, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 12, 12, 12, 12, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6 };
            fakeReels[3] = new[] { 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 0, 0, 0, 0, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 9, 9, 9, 9, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 10, 10, 10, 10, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 10, 10, 10, 10, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 11, 11, 11, 11, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 11, 11, 11, 11, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 12, 12, 12, 12, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 12, 12, 12, 12, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 3 };
            fakeReels[4] = new[] { 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 0, 0, 0, 0, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 9, 9, 9, 9, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 10, 10, 10, 10, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 10, 10, 10, 10, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 11, 11, 11, 11, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 11, 11, 11, 11, 3, 3, 3, 3, 8, 8, 8, 8, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 8, 8, 8, 8, 6, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 2, 2, 2, 2, 5, 5, 5, 5, 5, 3, 3, 3, 3, 8, 8, 8, 8, 7, 7, 7, 7, 5, 5, 5, 5, 4, 4, 4, 4, 12, 12, 12, 12, 8, 8, 8, 8, 1, 1, 1, 1, 5, 5, 5, 5, 7, 7, 7, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 12, 12, 12, 12, 3, 3, 3 };

            return fakeReels;
        }

        /// <summary>
        /// Vraća niz koeficijenata za id simbola.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static int[] GetSymbolCoefficients(int id)
        {
            if (id == 0)
            {
                return WinForWildFruityForce[0];
            }
            var coefficients = new int[5];
            for (var i = 0; i < 5; i++)
            {
                coefficients[i] = WinForLinesFruityForce[id, i];
            }
            return coefficients;
        }

        public static HelpConfigV3<object> GetHelpConfigV3()
        {
            var helpV3 = new HelpConfigV3<object>
            {
                rtp = (decimal?)96.62,
                symbols = GetHelpSymbolConfigV3(),
                lines = GetHelpLineConfigV3()
            };

            return helpV3;
        }

        private static HelpSymbolConfigV3<object>[] GetHelpSymbolConfigV3()
        {
            var symbols = new HelpSymbolConfigV3<object>[9];
            for (var i = 0; i < 9; i++)
            {
                symbols[i] = new HelpSymbolConfigV3<object>
                {
                    id = i,
                    extra = new HelpSymbolExtraV3(),
                    coefficients = GetSymbolCoefficients(i),
                    features = new[] { HelpSymbolFeatureV3.Regular }
                };
            }

            return symbols;
        }

        private static HelpLineConfigV3[] GetHelpLineConfigV3()
        {
            var lines = new HelpLineConfigV3[40];
            for (var i = 0; i < 40; i++)
            {
                var pos = new int[5];
                for (var j = 0; j < 5; j++)
                {
                    pos[j] = GlobalData.GameLineTurbo[i, j];
                }
                lines[i] = new HelpLineConfigV3 { id = i, positions = pos };
            }

            return lines;
        }

        #endregion
    }
}
