using MathBaseProject.BaseMathData;
using MathBaseProject.StructuresV3;
using MathForUnicornGames.BasicUnicornData;
using RNGUtils.RandomData;
using System;

namespace MathForUnicornGames.GameSimplySevens
{
    public class MatrixSimplySevens : Matrix
    {
        #region Constructor

        public MatrixSimplySevens()
            : base(5)
        {

        }

        #endregion

        #region Reels

        private static readonly int[][][] _Reels =
{
    new[]{
        new[]{0,0,0,3,3,3,1,1,5,5,5,5,7,7,7,6,6,6,6,2,2,8,8,8,4,4,4,7,7,2,2,3,3,0,0,8,8,8,1,1,4,4,6,6,5,5,7,7,7},
        new[]{5,5,4,4,4,2,6,6,6,5,5,0,0,3,3,7,7,7,4,4,2,2,8,8,8,1,1,5,5,6,6,6,8,8,1,3,3,4,4,6,6,6,8,8,8,1,7,7,7},
        new[]{4,4,5,5,5,6,6,6,6,3,3,3,0,0,7,7,7,8,8,8,8,2,2,5,5,5,1,1,7,7,6,6,0,0,0,3,3,1,1,1,4,4,4,6,6,7,7,1,1},
        new[]{7,7,7,4,4,4,5,5,5,6,6,6,3,3,3,3,1,1,5,5,0,0,8,8,8,2,2,2,3,3,3,6,6,6,8,8,8,7,7,7,4,4,6,6,7,7,8,8,8},
        new[]{1,1,3,3,3,5,5,5,6,6,6,8,8,8,8,7,7,7,2,2,5,5,5,0,0,4,4,2,2,2,7,7,7,5,5,8,8,8,3,3,3,5,5,6,6,7,7,7,1}
    },
    new[]{
        new[]{7,7,8,8,8,5,5,5,6,6,6,2,2,3,3,4,4,1,1,8,8,8,0,0,7,7,7,2,2,5,5,5,8,8,8,7,7,7},
        new[]{7,7,8,8,8,5,5,5,6,6,6,2,2,3,3,4,4,1,1,8,8,8,0,0,7,7,7,2,2,5,5,5,8,8,8,7,7,7},
        new[]{7,7,8,8,8,5,5,5,6,6,6,2,2,3,3,4,4,1,1,8,8,8,0,0,7,7,7,2,2,5,5,5,8,8,8,7,7,7},
        new[]{7,7,8,8,8,5,5,5,6,6,6,2,2,3,3,4,4,1,1,8,8,8,0,0,7,7,7,2,2,5,5,5,8,8,8,7,7,7},
        new[]{7,7,8,8,8,5,5,5,6,6,6,2,2,3,3,4,4,1,1,8,8,8,0,0,7,7,7,2,2,5,5,5,8,8,8,7,7,7}
    },
    new[]{
        new[]{7,7,2,5,5,1,3,3,0,4,4,1,6,6,2,8,8,0,5,5,3,3,6,6,8,8,4,4,7,7,7},
        new[]{7,7,2,5,5,1,3,3,0,4,4,1,6,6,2,8,8,0,5,5,3,3,6,6,8,8,4,4,7,7,7},
        new[]{7,7,2,5,5,1,3,3,0,4,4,1,6,6,2,8,8,0,5,5,3,3,6,6,8,8,4,4,7,7,7},
        new[]{7,7,2,5,5,1,3,3,0,4,4,1,6,6,2,8,8,0,5,5,3,3,6,6,8,8,4,4,7,7,7},
        new[]{7,7,2,5,5,1,3,3,0,4,4,1,6,6,2,8,8,0,5,5,3,3,6,6,8,8,4,4,7,7,7}
    },
    new[]{
        new[]{2,2,2,5,5,1,1,1,4,4,0,0,0,6,6,6,8,8,8,7,7,7,3,3,3,4,4,6,6,5,5,7,7,8,8,5,7,4,8,3},
        new[]{2,2,2,5,5,1,1,1,4,4,0,0,0,6,6,6,8,8,8,7,7,7,3,3,3,4,4,6,6,5,5,7,7,8,8,5,7,4,8,3},
        new[]{2,2,2,5,5,1,1,1,4,4,0,0,0,6,6,6,8,8,8,7,7,7,3,3,3,4,4,6,6,5,5,7,7,8,8,5,7,4,8,3},
        new[]{2,2,2,5,5,1,1,1,4,4,0,0,0,6,6,6,8,8,8,7,7,7,3,3,3,4,4,6,6,5,5,7,7,8,8,5,7,4,8,3},
        new[]{2,2,2,5,5,1,1,1,4,4,0,0,0,6,6,6,8,8,8,7,7,7,3,3,3,4,4,6,6,5,5,7,7,8,8,5,7,4,8,3}
    },
    new[]{
        new[]{0,0,4,4,2,2,6,6,6,8,8,8,5,5,5,3,3,3,8,8,4,4,6,6,4,4,8,8,8,6,6},
        new[]{0,0,4,4,1,1,8,8,8,6,6,6,3,3,3,7,7,7,8,8,4,4,6,6,4,4,8,8,8},
        new[]{2,2,6,6,1,1,4,4,4,8,8,8,5,5,5,7,7,7,8,8,4,4,6,6,6},
        new[]{0,0,8,8,1,1,4,4,2,2,6,6,6,3,3,5,5,5,7,7,7,8,8,4,4,6,6},
        new[]{0,0,4,4,1,1,6,6,2,2,8,8,8,7,7,3,3,5,5,5,5,8,8,4,4,6,6,8,8,8,8}
    },
    new[]{
        new[]{2,2,2,5,5,5,3,3,3,3,0,0,0,7,7,7,7,1,1,1,3,3,3,5,5},
        new[]{2,2,2,5,5,4,4,1,1,1,7,7,7,8,8,8,8,8,6,6,0,0,6,6,6,6,6,6,6,6,5,5,4,4},
        new[]{2,2,2,4,4,4,4,1,1,1,3,3,3,0,0,0,8,8,8,6,6,6,6,4,4,6,6,6,3,3,3},
        new[]{2,2,2,4,4,4,1,1,1,6,6,6,0,0,8,8,8,8,3,3,5,5,7,7,7,8,8,8,3,3,5,5,7,7,7},
        new[]{3,2,2,4,4,4,1,1,6,6,6,6,0,0,8,8,8,8,3,3,5,5,7,7,7,8,8,8,3,3,5,5,7,7,7}
    },
    new[]{
        new[]{0,0,0,3,3,3,5,5,5,5,7,7,7},
        new[]{1,1,1,4,4,4,2,2,2,6,6,6,8,8,8},
        new[]{1,1,1,4,4,4,2,2,2,6,6,6,8,8,8,0,0,0,3,3,3,5,5,5,5,7,7,7},
        new[]{1,1,1,4,4,4,2,2,2,6,6,6,8,8,8,0,0,0,3,3,3,5,5,5,5,7,7,7},
        new[]{1,1,1,4,4,4,2,2,2,6,6,6,8,8,8,0,0,0,3,3,3,5,5,5,5,7,7,7}
    },
    new[]{
        new[]{0,0,0,4,4,4,2,2,2,3,3,3,1,1,1,4,4,0,0,3,3,2,2,3,3,1,1,0,0,0,2,2,2,1,1,1},
        new[]{0,0,0,5,5,5,2,2,2,6,6,6,1,1,1,7,7,0,0,6,6,2,2,6,6,1,1,0,0,0,2,2,2,1,1,1},
        new[]{0,0,0,5,5,5,2,2,2,6,6,6,1,1,1,7,7,0,0,6,6,2,2,6,6,1,1,0,0,0,2,2,2,1,1,1,0,0,0,4,4,4,2,2,2,3,3,3,1,1,1,4,4,0,0,3,3,2,2,3,3,1,1,0,0,0,2,2,2,1,1,1},
        new[]{4,4,4,5,5,5,6,6,6,7,7,7,3,3,3,5,5,5,6,6,6,7,7,7,3,3,3,4,4,4,0,0,0,4,4,4,5,5,5,6,6,6,7,7,7,3,3,3,5,5,5,6,6,6,7,7,7,3,3,3,4,4,4,1,1,1,4,4,4,5,5,5,6,6,6,7,7,7,3,3,3,5,5,5,6,6,6,7,7,7,2,2,2},
        new[]{4,4,4,5,5,5,6,6,6,7,7,7,3,3,3,5,5,5,6,6,6,7,7,7}
    },
    new[]{
        new[]{1,1,1,3,3,3,5,5,5,7,7,7,0,0,0,5,5,1,1,1,7,7,3,3,3,5,5,5},
        new[]{2,2,2,4,4,4,6,6,6,2,2,4,4,4,6,6,4,4,4},
        new[]{1,1,1,3,3,3,5,5,5,7,7,7,0,0,0,5,5,1,1,1,7,7,3,3,3,5,5,5,2,2,2,4,4,4,6,6,6,2,2,4,4,4,6,6,4,4,4},
        new[]{1,1,1,3,3,3,5,5,5,7,7,7,0,0,0,5,5,1,1,1,7,7,3,3,3,5,5,5,2,2,2,4,4,4,6,6,6,2,2,4,4,4,6,6,4,4,4},
        new[]{1,1,1,3,3,3,5,5,5,7,7,7,0,0,0,5,5,1,1,1,7,7,3,3,3,5,5,5,2,2,2,4,4,4,6,6,6,2,2,4,4,4,6,6,4,4,4}
    }
};
        private static readonly int[][] _ReelSpecial =
        {
    new[]{0,0,0,0,0,0},
    new[]{10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,10,0,0,0,0,0,10,0,0,0,0,0},
    new[]{10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0},
    new[]{10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0},
    new[]{0,0,0,0,0,0}
};

        #endregion

        #region Public properties

        public static readonly int[,] WinForLinesSimplySevens =
        {
            {0, 20, 100, 500, 2000},
            {0, 20, 100, 500, 2000},
            {0, 20, 100, 500, 2000},
            {0, 5, 25, 120, 500},
            {0, 5, 25, 120, 500},
            {0, 2, 20, 50, 200},
            {0, 2, 20, 50, 200},
            {0, 2, 10, 25, 100},
            {0, 2, 10, 25, 100},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        };
        public static int[] PlayLines = { 10 };
        public const int JACKPOT = 10000;

        private static readonly double[] _ReelProbs = { 0.17234, 0.10532, 0.02872, 0.09574, 0.16276, 0.10532, 0.0766, 0.03265, 0.22055 };

        #endregion

        public override int CalculateWinLine(int lineNumber)
        {
            return GetLine(lineNumber, UnicornGlobalData.GameLineShifted).CalculateLineWin(WinForLinesSimplySevens, null, -1, 1);
        }

        /// <summary>
		/// Konstruiše matricu na osnovu dvodimenzionalnog niza za igru SimplySevens.
		/// </summary>
		/// <param name="matrix"></param>
		public void FromMatrixArraySimplySevens(int[,] matrix)
        {
            for (var i = 0; i < 5; i++)
            {
                for (var j = 0; j < 5; j++)
                {
                    SetElement(i, j, matrix[i, j]);
                }
            }
        }

        /// <summary>
        /// Daje niz pozicija za simbol 10.
        /// </summary>
        /// <returns></returns>
        public byte[] GetJackpotPositionsArray()
        {
            var positions = new byte[5];
            var index = 0;
            for (var i = 1; i < 4; i++)
            {
                for (var j = 1; j < 4; j++)
                {
                    if (GetElement(i, j) == 10)
                    {
                        positions[index++] = (byte)(j * 5 + i);
                    }
                }
            }
            for (; index < 5; index++)
            {
                positions[index] = 255;
            }
            return positions;
        }

        public static int[,] GetMatixArray()
        {
            var reelsSet = -1;
            var sum = 0.0;
            var rnd = SoftwareRng.Next();
            var n = _ReelProbs.Length;
            for (var i = 0; i < n; i++)
            {
                sum += _ReelProbs[i];
                if (rnd < sum)
                {
                    reelsSet = i;
                    break;
                }
            }
            var mat = new int[5, 5];
            for (var i = 0; i < 5; i++)
            {
                var l = _Reels[reelsSet][i].Length;
                var p = SoftwareRng.Next(l);
                for (var j = 0; j < 5; j++)
                {
                    mat[i, j] = _Reels[reelsSet][i][(p + j) % l];
                }
            }
            if (reelsSet == 8)
            {
                var matSpec = new int[5, 5];
                for (var i = 0; i < 5; i++)
                {
                    var l = _ReelSpecial[i].Length;
                    var p = SoftwareRng.Next(l);
                    for (var j = 0; j < 5; j++)
                    {
                        matSpec[i, j] = _ReelSpecial[i][(p + j) % l];
                    }
                }
                for (var i = 0; i < 5; i++)
                {
                    for (var j = 0; j < 5; j++)
                    {
                        mat[i, j] = Math.Max(mat[i, j], matSpec[i, j]);
                    }
                }
            }
            return mat;
        }

        #region Struct V3

        /// <summary>
        /// Vraća lažne rilove koji se koriste samo za prikaz okretanja
        /// </summary>
        /// <returns></returns>
        public static int[][] GetFakeReels()
        {
            var fakeReels = new int[5][];

            fakeReels[0] = new[] { 6, 6, 6, 0, 0, 7, 7, 7, 3, 3, 5, 5, 5, 2, 2, 6, 6, 6, 3, 3, 5, 5, 5, 4, 4, 1, 1, 8, 8, 8, 6, 6, 6, 5, 5, 5, 6, 6, 6, 3, 3, 5, 5, 5, 4, 4, 8, 8, 8, 5, 5, 5, 1, 1, 7, 7, 7, 2, 2 };
            fakeReels[1] = new[] { 6, 6, 6, 0, 0, 7, 7, 7, 3, 3, 10, 5, 5, 5, 2, 2, 6, 6, 6, 3, 3, 5, 5, 5, 4, 4, 1, 1, 8, 8, 8, 6, 6, 6, 5, 5, 5, 6, 6, 6, 3, 3, 5, 5, 5, 4, 4, 8, 8, 8, 5, 5, 5, 1, 1, 7, 7, 7, 2, 2 };
            fakeReels[2] = new[] { 6, 6, 6, 0, 0, 7, 7, 7, 3, 3, 10, 5, 5, 5, 2, 2, 6, 6, 6, 3, 3, 5, 5, 5, 4, 4, 1, 1, 8, 8, 8, 6, 6, 6, 5, 5, 5, 6, 6, 6, 3, 3, 5, 5, 5, 4, 4, 8, 8, 8, 5, 5, 5, 1, 1, 7, 7, 7, 2, 2 };
            fakeReels[3] = new[] { 6, 6, 6, 0, 0, 7, 7, 7, 3, 3, 10, 5, 5, 5, 2, 2, 6, 6, 6, 3, 3, 5, 5, 5, 4, 4, 1, 1, 8, 8, 8, 6, 6, 6, 5, 5, 5, 6, 6, 6, 3, 3, 5, 5, 5, 4, 4, 8, 8, 8, 5, 5, 5, 1, 1, 7, 7, 7, 2, 2 };
            fakeReels[4] = new[] { 6, 6, 6, 0, 0, 7, 7, 7, 3, 3, 5, 5, 5, 2, 2, 6, 6, 6, 3, 3, 5, 5, 5, 4, 4, 1, 1, 8, 8, 8, 6, 6, 6, 5, 5, 5, 6, 6, 6, 3, 3, 5, 5, 5, 4, 4, 8, 8, 8, 5, 5, 5, 1, 1, 7, 7, 7, 2, 2 };
            return fakeReels;
        }

        /// <summary>
        /// Vraća niz koeficijenata za id simbola.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static int[] GetSymbolCoefficients(int id)
        {
            var coefficients = new int[5];
            for (var i = 0; i < 5; i++)
            {
                coefficients[i] = WinForLinesSimplySevens[id, i];
            }
            return coefficients;
        }

        public static HelpConfigV3<object> GetHelpConfigV3()
        {
            var helpV3 = new HelpConfigV3<object>
            {
                rtp = (decimal?)96.0,
                symbols = GetHelpSymbolConfigV3(),
                lines = GetHelpLineConfigV3()
            };

            return helpV3;
        }

        private static HelpSymbolConfigV3<object>[] GetHelpSymbolConfigV3()
        {
            var symbols = new HelpSymbolConfigV3<object>[9];

            for (var i = 0; i < 9; i++)
            {
                symbols[i] = new HelpSymbolConfigV3<object>
                {
                    id = i,
                    features = new[] { HelpSymbolFeatureV3.Regular },
                    extra = new HelpSymbolExtraV3(),
                    coefficients = GetSymbolCoefficients(i)
                };
            }
            return symbols;
        }

        public static HelpLineConfigV3[] GetHelpLineConfigV3()
        {
            var lines = new HelpLineConfigV3[10];
            for (var i = 0; i < 10; i++)
            {
                var pos = new int[5];
                for (var j = 0; j < 5; j++)
                {
                    pos[j] = UnicornGlobalData.GameLineShifted[i, j] - 1;
                }
                lines[i] = new HelpLineConfigV3 { id = i, positions = pos };
            }

            return lines;
        }

        #endregion
    }
}
