using MathBaseProject.BaseMathData;
using MathBaseProject.StructuresV3;
using MathForUnicornGames.BasicUnicornData;
using RNGUtils.RandomData;
using System;

namespace MathForUnicornGames.Game10JingleFruits
{
    public class Matrix10JingleFruits : Matrix
    {
        #region Rilovi

        private static readonly int[][][] _Reels =
{
    new[]{
        new[]{4,4,4,1,1,1,0,1,1,3,3,3,0,3,3,5,5,5,5,5,2,2,5,5,2,2,2,4,4,4,4,6,6,6,6,1,1,1,0,0,0,0,1,3,3,3,3,5,5,5,5,2,5,2,2,2,4,4,4,4,6,6,6,6,4,6,4,4,4,3,3,3,5,5,5},
        new[]{4,4,4,4,3,3,4,4,3,3,3,3,6,6,6,6,6,2,2,0,2,2,2,5,5,5,5,0,5,5,1,1,1,4,4,1,1,4,4,4,4,3,3,4,4,4,6,6,6,4,4,4,4,5,5,5,5,1,1,5,5,1,1,6,6,6,6,2,0,0,0,0,2,2,2},
        new[]{5,5,5,5,6,6,6,6,4,4,6,4,4,0,3,3,3,3,1,1,3,3,1,1,1,4,4,4,4,4,2,2,6,6,2,2,2,5,5,0,0,0,0,5,5,5,5,0,5,5,1,1,3,3,1,1,3,3,3,3,4,4,4,4,4,4,6,6,6,6,2,6,2,2,2},
        new[]{5,5,5,5,3,3,0,3,3,3,3,3,0,2,2,2,5,5,5,4,4,4,4,6,6,4,4,6,6,6,6,1,1,1,5,5,3,3,3,3,0,0,0,0,4,4,4,4,5,5,5,5,1,1,1,5,5,2,2,2,5,5,5,4,4,4,4,6,6,4,4,6,6,6,6},
        new[]{3,3,3,0,5,5,5,6,6,6,6,0,4,4,6,6,4,4,3,3,3,3,1,1,1,5,5,5,5,2,2,2,4,4,4,4,3,3,3,3,0,0,0,0,5,5,5,5,6,6,6,6,4,4,6,6,4,4,1,1,1,3,3,3,3,5,5,5,5,2,2,2,4,4,4}
    },
    new[]{
        new[]{4,4,4,4,3,3,4,4,3,3,3,3,6,6,6,5,5,5,2,2,0,2,2,2,5,5,5,5,0,5,5,1,1,1,4,4,1,1,4,4,4,4,3,3,4,4,4,3,3,3,3,6,6,6,5,5,5,5,1,1,5,5,1,1,6,6,6,2,0,0,0,0,2,2,2},
        new[]{4,4,4,1,1,1,0,1,1,3,3,3,0,3,3,5,5,5,5,2,2,6,6,6,2,2,2,3,3,3,3,6,6,6,6,1,1,1,0,0,0,0,1,3,3,3,3,5,5,5,5,2,5,2,2,2,3,3,3,3,6,6,6,6,4,6,4,4,4,3,3,3,5,5,5},
        new[]{5,5,5,5,6,6,6,4,4,6,6,4,4,0,3,3,3,3,1,1,3,3,1,1,1,4,4,4,4,4,2,2,5,5,2,2,2,6,6,0,0,0,0,5,5,5,5,0,5,5,3,3,1,1,3,3,3,3,1,1,4,4,4,4,4,4,6,6,6,6,6,2,2,2,2},
        new[]{3,3,3,0,5,5,5,6,6,6,6,0,4,4,6,6,5,5,5,4,4,4,4,1,1,1,5,5,5,5,2,2,2,4,4,4,3,3,3,3,0,0,0,0,5,5,5,5,6,6,6,6,4,4,6,6,4,4,1,1,1,4,4,4,4,5,5,5,5,2,2,2,4,4,4},
        new[]{5,5,5,5,3,3,0,3,3,3,3,3,0,2,2,2,4,4,4,4,4,4,4,6,6,4,4,6,6,6,6,1,1,1,5,5,3,3,3,3,0,0,0,0,3,3,3,3,5,5,5,5,1,1,1,5,5,2,2,2,5,5,5,4,4,4,4,6,6,4,4,6,6,6,6}
    },
    new[]{
        new[]{4,4,4,0,0,5,5,5,6,6,5,5,5,5,4,4,4,4,6,6,6,6,0,0,0,0,5,5,5,5,6,5,4,4,4,4,6,6,6,6,4,6,4,4,4,5,5,5},
        new[]{3,3,3,3,1,1,3,3,2,2,2,0,2,2,2,0,1,1,1,3,3,1,1,1,1,2,0,0,0,0,2,2,2,3,3,3,3,1,1,3,3,2,2,2,0,2,2,2},
        new[]{5,5,5,5,6,6,6,6,4,4,6,4,4,3,3,3,3,1,1,3,3,1,1,1,4,4,4,4,4,2,2,6,6,2,2,2,5,5,5,5,5,5,5,5,1,1,1,1},
        new[]{5,5,5,5,3,3,0,3,3,3,3,3,0,2,2,2,5,5,5,4,4,4,4,6,6,4,4,6,6,6,6,1,1,1,5,5,3,3,3,3,6,6,0,0,4,4,4,4},
        new[]{3,3,3,0,5,5,5,6,6,6,6,0,4,4,6,6,4,4,3,3,3,3,1,1,1,5,5,5,5,2,2,2,4,4,4,4,3,3,3,3,0,0,2,2,5,5,5,5}
    }
};
        private static readonly int[][][] _ReelSpecial =
        {
    new[]{
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0}
    },
    new[]{
        new[]{0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    },
    new[]{
        new[]{7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,9,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,9,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,9,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,9,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,9,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0}
    },
    new[]{
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,9,0,0,0,0,8,0,0,0,8,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,9,0,0,0,0,8,0,0,0,8,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,9,0,0,0,0,8,0,0,0,8,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    },
    new[]{
        new[]{0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,8,0,0,0,0,9,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7},
        new[]{0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,8,0,0,0,0,9,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7},
        new[]{0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,8,0,0,0,0,9,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7},
        new[]{0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,8,0,0,0,0,9,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7},
        new[]{0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,8,0,0,0,0,9,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7}
    },
    new[]{
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,9,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,9,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0,7,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,9,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,9,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,9,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    },
    new[]{
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    },
    new[]{
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        new[]{0,0,0,0,7,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,7,0,0,0,0,8,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
    }
};

        #endregion

        #region Constructor

        public Matrix10JingleFruits()
            : base(5)
        {

        }

        #endregion

        #region Public properties

        public static readonly int[,] WinForLines10JingleFruits =
        {
            {0, 0, 50, 200, 500},
            {0, 0, 20, 100, 200},
            {0, 0, 20, 100, 200},
            {0, 0, 10, 40, 100},
            {0, 0, 10, 40, 100},
            {0, 0, 10, 25, 80},
            {0, 0, 10, 25, 80},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0}
        };
        public static readonly int[] WinForJingles = { 0, 0, 0, 0, 0, 2, 3, 4, 6, 8, 10, 20, 40, 60, 100, 1000 };
        public static readonly double[][] PowerPlayProbs =
        {
            new[] { 0.001, 0.005, 0.05, 0.084, 0.6845, 0.1755 },
            new[] { 0.00105, 0.02631, 0.08316, 0.07895, 0.6, 0.21053 },
            new[] { 0.001, 0.024, 0.15, 0.15, 0.575, 0.1 },
            new[] { 0.001, 0.035, 0.244, 0.27, 0.45 },
            new[] { 0.001, 0.05, 0.3, 0.349, 0.3 },
            new[] { 0.002, 0.08, 0.268, 0.3, 0.35 },
            new[] { 0.002, 0.168, 0.33, 0.4, 0.1 },
            new[] { 0.005, 0.2, 0.55, 0.245 },
            new[] { 0.01, 0.64, 0.35 },
            new[] { 0.05, 0.95 },
            new[] { 1.0 }
        };
        public static int[] PlayLines = { 10 };

        private static readonly double[] _ReelProbs = { 0.739585, 0.220915, 0.0395 };
        private static readonly double[] _ReelProbSpec = { 0.010003, 0.090027, 0.010003, 0.010503, 0.134291, 0.415127, 0.220067, 0.109979 };

        #endregion

        /// <summary>
        /// Računa dobitak linije.
        /// </summary>
        /// <param name="lineNumber">Broj linije.</param>
        /// <returns></returns>
        public override int CalculateWinLine(int lineNumber)
        {
            return GetLine(lineNumber, UnicornGlobalData.GameLineShifted).CalculateLineWin(WinForLines10JingleFruits, null, -1, 1);
        }

        public static int[,] GetMatixArray()
        {
            var reelsSet = -1;
            var specReelSet = -1;
            var sum = 0.0;
            var rnd = SoftwareRng.Next();
            var n = _ReelProbs.Length;
            for (var i = 0; i < n; i++)
            {
                sum += _ReelProbs[i];
                if (rnd < sum)
                {
                    reelsSet = i;
                    break;
                }
            }
            sum = 0.0;
            rnd = SoftwareRng.Next();
            n = _ReelProbSpec.Length;
            for (var i = 0; i < n; i++)
            {
                sum += _ReelProbSpec[i];
                if (rnd < sum)
                {
                    specReelSet = i;
                    break;
                }
            }
            var mat = new int[5, 5];
            var matSpec = new int[5, 5];
            for (var i = 0; i < 5; i++)
            {
                var l = _Reels[reelsSet][i].Length;
                var p = SoftwareRng.Next(l);
                var lspec = _ReelSpecial[specReelSet][i].Length;
                var pspec = SoftwareRng.Next(lspec);
                for (var j = 0; j < 5; j++)
                {
                    mat[i, j] = _Reels[reelsSet][i][(p + j) % l];
                    matSpec[i, j] = _ReelSpecial[specReelSet][i][(pspec + j) % lspec];
                }
            }
            for (var i = 0; i < 5; i++)
            {
                for (var j = 0; j < 5; j++)
                {
                    mat[i, j] = Math.Max(mat[i, j], matSpec[i, j]);
                }
            }
            return mat;
        }

        /// <summary>
        /// Konstruiše matricu na osnovu dvodimenzionalnog niza za igru 10JingleFruits.
        /// </summary>
        /// <param name="matrix"></param>
        public void FromMatrixArray10JingleFruits(int[,] matrix)
        {
            for (var i = 0; i < 5; i++)
            {
                for (var j = 0; j < 5; j++)
                {
                    SetElement(i, j, matrix[i, j]);
                }
            }
        }

        /// <summary>
        /// Daje novi broj sketera (power play).
        /// </summary>
        /// <param name="scatCount">Trenutni broj sketera</param>
        /// <returns></returns>
        public static int GetPowerPlay(int scatCount)
        {
            if (scatCount < 5)
            {
                return scatCount;
            }
            var probs = PowerPlayProbs[scatCount - 5];
            var sum = 0.0;
            var rnd = SoftwareRng.Next();
            var n = probs.Length;
            for (var i = 0; i < n; i++)
            {
                sum += probs[i];
                if (rnd < sum)
                {
                    return 15 - i;
                }
            }
            return -1;
        }

        #region Struct V3

        /// <summary>
        /// Vraća lažne rilove koji se koriste samo za prikaz okretanja
        /// </summary>
        /// <returns></returns>
        public static int[][] GetFakeReels()
        {
            var fakeReels = new int[5][];

            fakeReels[0] = new[] { 6, 6, 6, 6, 0, 3, 3, 3, 3, 1, 1, 5, 5, 5, 5, 10, 2, 2, 2, 0, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5, 5, 20, 4, 4, 4, 4, 0, 6, 6, 6, 6, 30, 5, 5, 5, 5, 1, 1, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5, 5, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 2, 2, 2 };
            fakeReels[1] = new[] { 6, 6, 6, 6, 0, 3, 3, 3, 3, 1, 1, 5, 5, 5, 5, 10, 2, 2, 2, 0, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5, 5, 20, 4, 4, 4, 4, 0, 6, 6, 6, 6, 30, 5, 5, 5, 5, 1, 1, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5, 5, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 2, 2, 2 };
            fakeReels[2] = new[] { 6, 6, 6, 6, 0, 3, 3, 3, 3, 1, 1, 5, 5, 5, 5, 10, 2, 2, 2, 0, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5, 5, 20, 4, 4, 4, 4, 0, 6, 6, 6, 6, 30, 5, 5, 5, 5, 1, 1, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5, 5, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 2, 2, 2 };
            fakeReels[3] = new[] { 6, 6, 6, 6, 0, 3, 3, 3, 3, 1, 1, 5, 5, 5, 5, 10, 2, 2, 2, 0, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5, 5, 20, 4, 4, 4, 4, 0, 6, 6, 6, 6, 30, 5, 5, 5, 5, 1, 1, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5, 5, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 2, 2, 2 };
            fakeReels[4] = new[] { 6, 6, 6, 6, 0, 3, 3, 3, 3, 1, 1, 5, 5, 5, 5, 10, 2, 2, 2, 0, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5, 5, 20, 4, 4, 4, 4, 0, 6, 6, 6, 6, 30, 5, 5, 5, 5, 1, 1, 6, 6, 6, 6, 3, 3, 3, 3, 5, 5, 5, 5, 4, 4, 4, 4, 0, 0, 5, 5, 5, 5, 2, 2, 2 };
            return fakeReels;
        }

        /// <summary>
        /// Vraća niz koeficijenata za id simbola.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static int[] GetSymbolCoefficients(int id)
        {
            var coefficients = new int[5];
            for (var i = 0; i < 5; i++)
            {
                coefficients[i] = WinForLines10JingleFruits[id, i];
            }
            return coefficients;
        }

        public static HelpConfigV3<object> GetHelpConfigV3()
        {
            var helpV3 = new HelpConfigV3<object>
            {
                rtp = (decimal?)96.0,
                symbols = GetHelpSymbolConfigV3(),
                lines = GetHelpLineConfigV3()
            };

            return helpV3;
        }

        private static HelpSymbolConfigV3<object>[] GetHelpSymbolConfigV3()
        {
            var symbols = new HelpSymbolConfigV3<object>[7];

            for (var i = 0; i < 7; i++)
            {
                symbols[i] = new HelpSymbolConfigV3<object>
                {
                    id = i,
                    features = new[] { HelpSymbolFeatureV3.Regular },
                    extra = new HelpSymbolExtraV3(),
                    coefficients = GetSymbolCoefficients(i)
                };
            }
            return symbols;
        }

        public static HelpLineConfigV3[] GetHelpLineConfigV3()
        {
            var lines = new HelpLineConfigV3[10];
            for (var i = 0; i < 10; i++)
            {
                var pos = new int[5];
                for (var j = 0; j < 5; j++)
                {
                    pos[j] = UnicornGlobalData.GameLineShifted[i, j] - 1;
                }
                lines[i] = new HelpLineConfigV3 { id = i, positions = pos };
            }

            return lines;
        }

        #endregion
    }
}
