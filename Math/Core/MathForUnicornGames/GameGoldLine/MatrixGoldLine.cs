using MathBaseProject.BaseMathData;
using MathBaseProject.StructuresV3;
using MathForUnicornGames.BasicUnicornData;
using RNGUtils.RandomData;
using System.Collections.Generic;

namespace MathForUnicornGames.GameGoldLine
{
    public class MatrixGoldLine : Matrix
    {
        #region Reels

        private static readonly int[][][][] _Reels =
{
    new[]{
        new[]{
            new[]{5,5,5,2,2,2,3,3,3,2,5,2,3,5,3,2,3,2,3,3,5,3,3,2,5,5,2,5,5,3},
            new[]{10,5,5,5,2,2,2,3,3,3,2,5,2,3,5,3,2,3,2,3,3,5,3,3,2,5,5,2,5,5,3,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4},
            new[]{10,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4},
            new[]{5,5,5,2,2,2,3,3,3,2,5,2,3,5,3,2,3,2,3,3,5,3,3,2,5,5,2,5,5,3,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0},
            new[]{5,5,5,2,2,2,3,3,3,2,5,2,3,5,3,2,3,2,3,3,5,3,3,2,5,5,2,5,5,3,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0}
        },
        new[]{
            new[]{5,5,5,3,3,3,2,2,2,3,5,3,2,5,2,3,2,3,2,2,5,2,2,3,5,5,3,5,5,2},
            new[]{10,5,5,5,3,3,3,2,2,2,3,5,3,2,5,2,3,2,3,2,2,5,2,2,3,5,5,3,5,5,2,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4},
            new[]{10,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4},
            new[]{5,5,5,3,3,3,2,2,2,3,5,3,2,5,2,3,2,3,2,2,5,2,2,3,5,5,3,5,5,2,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0},
            new[]{5,5,5,3,3,3,2,2,2,3,5,3,2,5,2,3,2,3,2,2,5,2,2,3,5,5,3,5,5,2,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0}
        },
        new[]{
            new[]{4,4,4,2,2,2,3,3,3,2,4,2,3,4,3,2,3,2,3,3,4,3,3,2,4,4,2,4,4,3},
            new[]{10,4,4,4,2,2,2,3,3,3,2,4,2,3,4,3,2,3,2,3,3,4,3,3,2,4,4,2,4,4,3,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5},
            new[]{10,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5},
            new[]{4,4,4,2,2,2,3,3,3,2,4,2,3,4,3,2,3,2,3,3,4,3,3,2,4,4,2,4,4,3,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0},
            new[]{4,4,4,2,2,2,3,3,3,2,4,2,3,4,3,2,3,2,3,3,4,3,3,2,4,4,2,4,4,3,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0}
        },
        new[]{
            new[]{4,4,4,3,3,3,2,2,2,3,4,3,2,4,2,3,2,3,2,2,4,2,2,3,4,4,3,4,4,2},
            new[]{10,4,4,4,3,3,3,2,2,2,3,4,3,2,4,2,3,2,3,2,2,4,2,2,3,4,4,3,4,4,2,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5},
            new[]{10,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5},
            new[]{4,4,4,3,3,3,2,2,2,3,4,3,2,4,2,3,2,3,2,2,4,2,2,3,4,4,3,4,4,2,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0},
            new[]{4,4,4,3,3,3,2,2,2,3,4,3,2,4,2,3,2,3,2,2,4,2,2,3,4,4,3,4,4,2,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0}
        },
    },
    new[]{
        new[]{
            new[]{5,5,5,2,2,2,3,3,3,2,5,2,3,5,3,2,3,2,3,3,5,3,3,2,5,5,2,5,5,3},
            new[]{10,5,5,5,2,2,2,3,3,3,2,5,2,3,5,3,2,3,2,3,3,5,3,3,2,5,5,2,5,5,3,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4},
            new[]{10,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4},
            new[]{5,5,5,2,2,2,3,3,3,2,5,2,3,5,3,2,3,2,3,3,5,3,3,2,5,5,2,5,5,3,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0},
            new[]{5,5,5,2,2,2,3,3,3,2,5,2,3,5,3,2,3,2,3,3,5,3,3,2,5,5,2,5,5,3,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0}
        },
        new[]{
            new[]{5,5,5,3,3,3,2,2,2,3,5,3,2,5,2,3,2,3,2,2,5,2,2,3,5,5,3,5,5,2},
            new[]{10,5,5,5,3,3,3,2,2,2,3,5,3,2,5,2,3,2,3,2,2,5,2,2,3,5,5,3,5,5,2,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4},
            new[]{10,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4},
            new[]{5,5,5,3,3,3,2,2,2,3,5,3,2,5,2,3,2,3,2,2,5,2,2,3,5,5,3,5,5,2,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0},
            new[]{5,5,5,3,3,3,2,2,2,3,5,3,2,5,2,3,2,3,2,2,5,2,2,3,5,5,3,5,5,2,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0}
        },
        new[]{
            new[]{4,4,4,2,2,2,3,3,3,2,4,2,3,4,3,2,3,2,3,3,4,3,3,2,4,4,2,4,4,3},
            new[]{10,4,4,4,2,2,2,3,3,3,2,4,2,3,4,3,2,3,2,3,3,4,3,3,2,4,4,2,4,4,3,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5},
            new[]{10,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5},
            new[]{4,4,4,2,2,2,3,3,3,2,4,2,3,4,3,2,3,2,3,3,4,3,3,2,4,4,2,4,4,3,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0},
            new[]{4,4,4,2,2,2,3,3,3,2,4,2,3,4,3,2,3,2,3,3,4,3,3,2,4,4,2,4,4,3,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0}
        },
        new[]{
            new[]{4,4,4,3,3,3,2,2,2,3,4,3,2,4,2,3,2,3,2,2,4,2,2,3,4,4,3,4,4,2},
            new[]{10,4,4,4,3,3,3,2,2,2,3,4,3,2,4,2,3,2,3,2,2,4,2,2,3,4,4,3,4,4,2,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5},
            new[]{10,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5},
            new[]{4,4,4,3,3,3,2,2,2,3,4,3,2,4,2,3,2,3,2,2,4,2,2,3,4,4,3,4,4,2,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0},
            new[]{4,4,4,3,3,3,2,2,2,3,4,3,2,4,2,3,2,3,2,2,4,2,2,3,4,4,3,4,4,2,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0}
        }
    },
    new[]{
        new[]{
            new[]{5,5,5,2,2,2,3,3,3,2,5,2,3,5,3,2,3,2,3,3,5,3,3,2,5,5,2,5,5,3},
            new[]{10,5,5,5,2,2,2,3,3,3,2,5,2,3,5,3,2,3,2,3,3,5,3,3,2,5,5,2,5,5,3,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4},
            new[]{10,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4},
            new[]{5,5,5,2,2,2,3,3,3,2,5,2,3,5,3,2,3,2,3,3,5,3,3,2,5,5,2,5,5,3,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0},
            new[]{5,5,5,2,2,2,3,3,3,2,5,2,3,5,3,2,3,2,3,3,5,3,3,2,5,5,2,5,5,3,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0}
        },
        new[]{
            new[]{5,5,5,3,3,3,2,2,2,3,5,3,2,5,2,3,2,3,2,2,5,2,2,3,5,5,3,5,5,2},
            new[]{10,5,5,5,3,3,3,2,2,2,3,5,3,2,5,2,3,2,3,2,2,5,2,2,3,5,5,3,5,5,2,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4},
            new[]{10,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4},
            new[]{5,5,5,3,3,3,2,2,2,3,5,3,2,5,2,3,2,3,2,2,5,2,2,3,5,5,3,5,5,2,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0},
            new[]{5,5,5,3,3,3,2,2,2,3,5,3,2,5,2,3,2,3,2,2,5,2,2,3,5,5,3,5,5,2,0,4,4,4,6,1,6,6,6,4,1,4,6,1,6,4,4,6,6,1,1,4,6,4,0}
        },
        new[]{
            new[]{4,4,4,2,2,2,3,3,3,2,4,2,3,4,3,2,3,2,3,3,4,3,3,2,4,4,2,4,4,3},
            new[]{10,4,4,4,2,2,2,3,3,3,2,4,2,3,4,3,2,3,2,3,3,4,3,3,2,4,4,2,4,4,3,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5},
            new[]{10,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5},
            new[]{4,4,4,2,2,2,3,3,3,2,4,2,3,4,3,2,3,2,3,3,4,3,3,2,4,4,2,4,4,3,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0},
            new[]{4,4,4,2,2,2,3,3,3,2,4,2,3,4,3,2,3,2,3,3,4,3,3,2,4,4,2,4,4,3,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0}
        },
        new[]{
            new[]{4,4,4,3,3,3,2,2,2,3,4,3,2,4,2,3,2,3,2,2,4,2,2,3,4,4,3,4,4,2},
            new[]{10,4,4,4,3,3,3,2,2,2,3,4,3,2,4,2,3,2,3,2,2,4,2,2,3,4,4,3,4,4,2,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5},
            new[]{10,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5},
            new[]{4,4,4,3,3,3,2,2,2,3,4,3,2,4,2,3,2,3,2,2,4,2,2,3,4,4,3,4,4,2,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0},
            new[]{4,4,4,3,3,3,2,2,2,3,4,3,2,4,2,3,2,3,2,2,4,2,2,3,4,4,3,4,4,2,0,5,5,5,6,1,6,6,6,5,1,5,6,1,6,5,5,6,6,1,1,5,6,5,0}
        }
    },
    new[]{
        new[]{
            new[]{0,1,3,3,3,0,2,6,6,6,0,1,1,2,2,0,6,6,6,4,0,2,2,3,6,0,1,6,6,6,0,4,4,4,5,0,5,1,1,6,0,6,4,5,4,0,6,6,4,1,1,3,3,3,6,6,4,2,2,2,5,4,5,5,2,6,2,4,6,4,6,6,2,2,6,6,5,5,2,4,6,4,6,6,2,5,5,6,5,6,2,2,2,5,6,6,6,5,2,2},
            new[]{10,2,6,2,6,0,3,2,5,6,10,6,6,1,1,0,2,6,2,6,0,3,3,6,1,0,3,1,3,2,0,5,6,6,5,0,1,5,5,1,0,5,6,3,3,0,5,2,1,2,4,5,1,3,5,3,5,2,6,6,6,2,2,4,5,5,5,2,2,6,2,5,4,5,5,2,6,2,4,5,5,5,2,2,2,6,6,4,6,6,2,5,2,6,4,6,4,4,2,2},
            new[]{10,3,3,1,6,0,6,3,1,3,0,6,4,4,6,0,1,1,3,3,0,6,4,1,6,0,3,2,1,3,0,4,4,1,1,0,5,2,2,2,6,1,3,5,3,4,4,6,6,3,3,6,2,1,1,3,5,3,3,6,6,6,5,2,5,2,5,6,5,6,5,2,2,2,6,5,5,4,5,6,6,2,5,2,6,5,5,6,2,5,4,4,4,5,5,5,2,6,6,2},
            new[]{10,2,6,4,1,0,6,1,6,6,0,3,3,4,4,0,3,6,1,1,0,4,1,6,6,0,2,2,5,1,0,5,1,5,5,3,3,3,6,6,6,3,1,1,5,5,6,4,2,3,2,3,5,6,6,6,1,3,3,3,2,6,2,3,3,3,6,2,2,2,6,5,6,6,2,2,2,5,6,6,4,2,2,6,5,6,2,5,2,4,6,5,6,2,6,4,5,6,6,6},
            new[]{6,2,2,2,6,0,6,4,6,6,0,5,2,3,3,3,4,2,6,4,0,6,1,6,6,5,2,5,6,6,6,1,6,2,2,2,4,4,4,3,3,2,5,2,3,6,1,3,6,6,3,5,6,6,5,3,5,3,1,6,6,5,4,4,3,3,3,6,5,5,6,6,3,3,3,2,2,2,5,6,6,5,2,2,6,4,4,2,6,2,4,5,5,5,2,6,5,6,6,6,4}
        },
        new[]{
            new[]{0,1,2,2,2,0,3,6,6,6,0,1,1,3,3,0,6,6,6,4,0,3,3,2,6,0,1,6,6,6,0,4,4,4,5,0,5,1,1,6,0,6,4,5,4,0,6,6,4,1,1,2,2,2,6,6,4,3,3,3,5,4,5,5,3,6,3,4,6,4,6,6,3,3,6,6,5,5,3,4,6,4,6,6,3,5,5,6,5,6,3,3,3,5,6,6,6,5,3,3},
            new[]{10,3,6,3,6,0,2,3,5,6,10,6,6,1,1,0,3,6,3,6,0,2,2,6,1,0,2,1,2,3,0,5,6,6,5,0,1,5,5,1,0,5,6,2,2,0,5,3,1,3,4,5,1,2,5,2,5,3,6,6,6,3,3,4,5,5,5,3,3,6,3,5,4,5,5,3,6,3,4,5,5,5,3,3,3,6,6,4,6,6,3,5,3,6,4,6,4,4,3,3},
            new[]{10,2,2,1,6,0,6,2,1,2,0,6,4,4,6,0,1,1,2,2,0,6,4,1,6,0,2,3,1,2,0,4,4,1,1,0,5,3,3,3,6,1,2,5,2,4,4,6,6,2,2,6,3,1,1,2,5,2,2,6,6,6,5,3,5,3,5,6,5,6,5,3,3,3,6,5,5,4,5,6,6,3,5,3,6,5,5,6,3,5,4,4,4,5,5,5,3,6,6,3},
            new[]{10,3,6,4,1,0,6,1,6,6,0,2,2,4,4,0,2,6,1,1,0,4,1,6,6,0,3,3,5,1,0,5,1,5,5,2,2,2,6,6,6,2,1,1,5,5,6,4,3,2,3,2,5,6,6,6,1,2,2,2,3,6,3,2,2,2,6,3,3,3,6,5,6,6,3,3,3,5,6,6,4,3,3,6,5,6,3,5,3,4,6,5,6,3,6,4,5,6,6,6},
            new[]{6,3,3,3,6,0,6,4,6,6,0,5,3,2,2,2,4,3,6,4,0,6,1,6,6,5,3,5,6,6,6,1,6,3,3,3,4,4,4,2,2,3,5,3,2,6,1,2,6,6,2,5,6,6,5,2,5,2,1,6,6,5,4,4,2,2,2,6,5,5,6,6,2,2,2,3,3,3,5,6,6,5,3,3,6,4,4,3,6,3,4,5,5,5,3,6,5,6,6,6,4}
        },
        new[]{
            new[]{0,1,3,3,3,0,2,6,6,6,0,1,1,2,2,0,6,6,6,5,0,2,2,3,6,0,1,6,6,6,0,5,5,5,4,0,4,1,1,6,0,6,5,4,5,0,6,6,5,1,1,3,3,3,6,6,5,2,2,2,4,5,4,4,2,6,2,5,6,5,6,6,2,2,6,6,4,4,2,5,6,5,6,6,2,4,4,6,4,6,2,2,2,4,6,6,6,4,2,2},
            new[]{10,2,6,2,6,0,3,2,4,6,10,6,6,1,1,0,2,6,2,6,0,3,3,6,1,0,3,1,3,2,0,4,6,6,4,0,1,4,4,1,0,4,6,3,3,0,4,2,1,2,5,4,1,3,4,3,4,2,6,6,6,2,2,5,4,4,4,2,2,6,2,4,5,4,4,2,6,2,5,4,4,4,2,2,2,6,6,5,6,6,2,4,2,6,5,6,5,5,2,2},
            new[]{10,3,3,1,6,0,6,3,1,3,0,6,5,5,6,0,1,1,3,3,0,6,5,1,6,0,3,2,1,3,0,5,5,1,1,0,4,2,2,2,6,1,3,4,3,5,5,6,6,3,3,6,2,1,1,3,4,3,3,6,6,6,4,2,4,2,4,6,4,6,4,2,2,2,6,4,4,5,4,6,6,2,4,2,6,4,4,6,2,4,5,5,5,4,4,4,2,6,6,2},
            new[]{10,2,6,5,1,0,6,1,6,6,0,3,3,5,5,0,3,6,1,1,0,5,1,6,6,0,2,2,4,1,0,4,1,4,4,3,3,3,6,6,6,3,1,1,4,4,6,5,2,3,2,3,4,6,6,6,1,3,3,3,2,6,2,3,3,3,6,2,2,2,6,4,6,6,2,2,2,4,6,6,5,2,2,6,4,6,2,4,2,5,6,4,6,2,6,5,4,6,6,6},
            new[]{6,2,2,2,6,0,6,5,6,6,0,4,2,3,3,3,5,2,6,5,0,6,1,6,6,4,2,4,6,6,6,1,6,2,2,2,5,5,5,3,3,2,4,2,3,6,1,3,6,6,3,4,6,6,4,3,4,3,1,6,6,4,5,5,3,3,3,6,4,4,6,6,3,3,3,2,2,2,4,6,6,4,2,2,6,5,5,2,6,2,5,4,4,4,2,6,4,6,6,6,5}
        },
        new[]{
            new[]{0,1,2,2,2,0,3,6,6,6,0,1,1,3,3,0,6,6,6,5,0,3,3,2,6,0,1,6,6,6,0,5,5,5,4,0,4,1,1,6,0,6,5,4,5,0,6,6,5,1,1,2,2,2,6,6,5,3,3,3,4,5,4,4,3,6,3,5,6,5,6,6,3,3,6,6,4,4,3,5,6,5,6,6,3,4,4,6,4,6,3,3,3,4,6,6,6,4,3,3},
            new[]{10,3,6,3,6,0,2,3,4,6,10,6,6,1,1,0,3,6,3,6,0,2,2,6,1,0,2,1,2,3,0,4,6,6,4,0,1,4,4,1,0,4,6,2,2,0,4,3,1,3,5,4,1,2,4,2,4,3,6,6,6,3,3,5,4,4,4,3,3,6,3,4,5,4,4,3,6,3,5,4,4,4,3,3,3,6,6,5,6,6,3,4,3,6,5,6,5,5,3,3},
            new[]{10,2,2,1,6,0,6,2,1,2,0,6,5,5,6,0,1,1,2,2,0,6,5,1,6,0,2,3,1,2,0,5,5,1,1,0,4,3,3,3,6,1,2,4,2,5,5,6,6,2,2,6,3,1,1,2,4,2,2,6,6,6,4,3,4,3,4,6,4,6,4,3,3,3,6,4,4,5,4,6,6,3,4,3,6,4,4,6,3,4,5,5,5,4,4,4,3,6,6,3},
            new[]{10,3,6,5,1,0,6,1,6,6,0,2,2,5,5,0,2,6,1,1,0,5,1,6,6,0,3,3,4,1,0,4,1,4,4,2,2,2,6,6,6,2,1,1,4,4,6,5,3,2,3,2,4,6,6,6,1,2,2,2,3,6,3,2,2,2,6,3,3,3,6,4,6,6,3,3,3,4,6,6,5,3,3,6,4,6,3,4,3,5,6,4,6,3,6,5,4,6,6,6},
            new[]{6,3,3,3,6,0,6,5,6,6,0,4,3,2,2,2,5,3,6,5,0,6,1,6,6,4,3,4,6,6,6,1,6,3,3,3,5,5,5,2,2,3,4,3,2,6,1,2,6,6,2,4,6,6,4,2,4,2,1,6,6,4,5,5,2,2,2,6,4,4,6,6,2,2,2,3,3,3,4,6,6,4,3,3,6,5,5,3,6,3,5,4,4,4,3,6,4,6,6,6,5}
        }
    },
    new[]{
        new[]{
            new[]{0,1,3,3,6,6,6,4,1,3,3,5,5,4,4,5,5,4,4,3,3,4,5,4,4,5,3,4,3,4,5,4,3,4,5,5,3},
            new[]{0,1,2,2,3,3,6,2,1,2,6,6,6,3,3,2,6,2,6,5,2,2,6,3,3,2,6,3,2,3,6,6,3,2,2,5,3,5,5,5},
            new[]{0,1,2,4,4,2,4,4,1,2,4,2,4,4,4,2,2,4,4,2,2,4,4,2,2,4,2,4,4,2,2},
            new[]{0,1,2,6,3,3,4,2,1,2,3,6,4,4,3,3,6,2,6,3,6,6,3,3,2,2,5,3,2,3,2,6,6,5,2,5,2},
            new[]{0,1,3,2,3,0,6,6,1,3,0,2,3,6,3,0,2,3,3,2,0,3,6,2,3,0,2,3,4,3,0,4,2,5,4,5,4,5,5,5}
        },
        new[]{
            new[]{0,1,2,2,6,6,6,4,1,2,2,5,5,4,4,5,5,4,4,2,2,4,5,4,4,5,2,4,2,4,5,4,2,4,5,5,2},
            new[]{0,1,3,3,2,2,6,3,1,3,6,6,6,2,2,3,6,3,6,5,3,3,6,2,2,3,6,2,3,2,6,6,2,3,3,5,2,5,5,5},
            new[]{0,1,3,4,4,3,4,4,1,3,4,3,4,4,4,3,3,4,4,3,3,4,4,3,3,4,3,4,4,3,3},
            new[]{0,1,3,6,2,2,4,3,1,3,2,6,4,4,2,2,6,3,6,2,6,6,2,2,3,3,5,2,3,2,3,6,6,5,3,5,3},
            new[]{0,1,2,3,2,0,6,6,1,2,0,3,2,6,2,0,3,2,2,3,0,2,6,3,2,0,3,2,4,2,0,4,3,5,4,5,4,5,5,5}
        },
        new[]{
            new[]{0,1,3,3,6,6,6,5,1,3,3,4,4,5,5,4,4,5,5,3,3,5,4,5,5,4,3,5,3,5,4,5,3,5,4,4,3},
            new[]{0,1,2,2,3,3,6,2,1,2,6,6,6,3,3,2,6,2,6,4,2,2,6,3,3,2,6,3,2,3,6,6,3,2,2,4,3,4,4,4},
            new[]{0,1,2,5,5,2,5,5,1,2,5,2,5,5,5,2,2,5,5,2,2,5,5,2,2,5,2,5,5,2,2},
            new[]{0,1,2,6,3,3,5,2,1,2,3,6,5,5,3,3,6,2,6,3,6,6,3,3,2,2,4,3,2,3,2,6,6,4,2,4,2},
            new[]{0,1,3,2,3,0,6,6,1,3,0,2,3,6,3,0,2,3,3,2,0,3,6,2,3,0,2,3,5,3,0,5,2,4,5,4,5,4,4,4}
        },
        new[]{
            new[]{0,1,2,2,6,6,6,5,1,2,2,4,4,5,5,4,4,5,5,2,2,5,4,5,5,4,2,5,2,5,4,5,2,5,4,4,2},
            new[]{0,1,3,3,2,2,6,3,1,3,6,6,6,2,2,3,6,3,6,4,3,3,6,2,2,3,6,2,3,2,6,6,2,3,3,4,2,4,4,4},
            new[]{0,1,3,5,5,3,5,5,1,3,5,3,5,5,5,3,3,5,5,3,3,5,5,3,3,5,3,5,5,3,3},
            new[]{0,1,3,6,2,2,5,3,1,3,2,6,5,5,2,2,6,3,6,2,6,6,2,2,3,3,4,2,3,2,3,6,6,4,3,4,3},
            new[]{0,1,2,3,2,0,6,6,1,2,0,3,2,6,2,0,3,2,2,3,0,2,6,3,2,0,3,2,5,2,0,5,3,4,5,4,5,4,4,4}
        }
    }
};

        #endregion

        #region Constructor

        public MatrixGoldLine()
            : base(5)
        {

        }

        #endregion

        #region Public properties

        public static readonly int[,] WinForLinesGoldLine =
        {
            {0, 0, 400, 800, 2000},
            {0, 0, 100, 400, 1000},
            {0, 0, 50, 200, 400},
            {0, 0, 50, 200, 400},
            {0, 0, 40, 100, 200},
            {0, 0, 40, 100, 200},
            {0, 0, 10, 50, 100},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0},
            {0, 0, 400, 800, 2000}
        };
        public static int[] PlayLines = { 20 };
        private static readonly double[] _ReelProbs = { 0.01648, 0.01648, 0.01648, 0.72718, 0.22338 };
        public const int WIN_FOR_JACKPOT = 10000;

        #endregion

        /// <summary>
        /// Računa dobitak linije.
        /// </summary>
        /// <param name="lineNumber">Broj linije.</param>
        /// <returns></returns>
        public override int CalculateWinLine(int lineNumber)
        {
            var l = GetLine(lineNumber, UnicornGlobalData.GameLineShifted);
            for (var i = 0; i < 5; i++)
            {
                if (l.GetElement(i) == 10)
                {
                    l.SetElement(i, 0);
                }
            }
            return l.CalculateLineWin(WinForLinesGoldLine, null, -1, 1);
        }

        public static int[,] GetMatixArray(out bool nextStep)
        {
            var reelsSet = -1;
            var sum = 0.0;
            var rnd = SoftwareRng.Next();
            var n = _ReelProbs.Length;
            for (var i = 0; i < n; i++)
            {
                sum += _ReelProbs[i];
                if (rnd < sum)
                {
                    reelsSet = i;
                    break;
                }
            }
            var mat = new int[5, 5];
            var k = SoftwareRng.Next(_Reels[reelsSet].Length);
            for (var i = 0; i < 5; i++)
            {
                var l = _Reels[reelsSet][k][i].Length;
                var p = SoftwareRng.Next(l);
                for (var j = 0; j < 5; j++)
                {
                    mat[i, j] = _Reels[reelsSet][k][i][(p + j) % l];
                }
            }
            nextStep = reelsSet > 2;
            return mat;
        }

        public bool JackpotWin(out byte[] position)
        {
            var pos = new List<byte>();
            var cnt = 0;
            for (var i = 0; i < 5; i++)
            {
                if (GetElement(i, 2) == 10)
                {
                    cnt++;
                    pos.Add((byte)(10 + i));
                }
            }
            pos.Add(255);
            pos.Add(255);
            position = pos.ToArray();
            return cnt == 3;
        }

        /// <summary>
        /// Konstruiše matricu na osnovu dvodimenzionalnog niza za igru GoldLine.
        /// </summary>
        /// <param name="matrix"></param>
        public void FromMatrixArrayGoldLine(int[,] matrix)
        {
            for (var i = 0; i < 5; i++)
            {
                for (var j = 0; j < 5; j++)
                {
                    SetElement(i, j, matrix[i, j]);
                }
            }
        }

        private static int GetIndex(double[] probs)
        {
            var sum = 0.0;
            var rnd = SoftwareRng.Next();
            var n = probs.Length;
            for (var i = 0; i < n; i++)
            {
                sum += probs[i];
                if (rnd < sum)
                {
                    return i;
                }
            }
            return -1;
        }

        public void SetGoldenLineNew()
        {
            var probs = new[] { 0.35, 0.55, 0.095, 0.005 };
            var index = GetIndex(probs);
            switch (index)
            {
                case 1:
                    Procedure12(1);
                    return;
                case 2:
                    Procedure12(2);
                    return;
                case 3:
                    Procedure3();
                    return;
            }
        }

        public void Procedure12(int procedure)
        {
            var probs1 = new[] { 0.08, 0.11, 0.11, 0.2, 0.2, 0.3 };
            var probs2 = new[] { 0.11956, 0.11956, 0.21739, 0.2174, 0.32609 };
            var symbols = new List<int> { 1, 2, 3, 4, 5, 6 };
            var index = GetIndex(probs1);
            var first = symbols[index];
            symbols.RemoveAt(index);
            index = GetIndex(probs2);
            var second = symbols[index];
            SetElement(0, 2, first);
            if (procedure == 1)
            {
                SetElement(1, 2, second);
            }
            if (procedure == 2)
            {
                SetElement(1, 2, first);
                SetElement(2, 2, second);
            }
        }

        public void Procedure3()
        {
            var probs = new[] { 0.1111111, 0.1111111, 0.1666667, 0.1666667, 0.4444444 };
            var symbols = new List<int> { 2, 3, 4, 5, 6 };
            var index = GetIndex(probs);
            SetElement(0, 2, symbols[index]);
            SetElement(1, 2, symbols[index]);
            SetElement(2, 2, symbols[index]);
        }

        /// <summary>
        /// Daje pozicije dobitnih elemenata.
        /// </summary>
        /// <param name="lineNumber">Broj linije.</param>
        /// <param name="element">Simbol</param>
        /// <returns></returns>
        public byte[] GetLinesPositions(int lineNumber, out int element)
        {
            var l = GetLine(lineNumber, UnicornGlobalData.GameLineShifted);
            for (var i = 0; i < 5; i++)
            {
                if (l.GetElement(i) == 10)
                {
                    l.SetElement(i, 0);
                }
            }
            element = l.GetElement(0);
            return l.GetLinesPositions(UnicornGlobalData.GameLineShifted, lineNumber, -1, element);
        }

        #region Struct V3

        /// <summary>
        /// Vraća lažne rilove koji se koriste samo za prikaz okretanja
        /// </summary>
        /// <returns></returns>
        public static int[][] GetFakeReels()
        {
            var fakeReels = new int[5][];

            fakeReels[0] = new[] { 6, 5, 6, 6, 0, 3, 3, 4, 3, 10, 1, 1, 5, 5, 1, 5, 2, 2, 2, 0, 6, 6, 3, 6, 3, 3, 6, 3, 5, 5, 0, 5, 4, 4, 1, 4, 0, 6, 6, 6, 6, 5, 5, 5, 5, 1, 1 };
            fakeReels[1] = new[] { 6, 5, 6, 6, 0, 3, 3, 4, 3, 10, 1, 1, 5, 5, 1, 5, 2, 2, 2, 0, 6, 6, 3, 6, 3, 3, 6, 3, 5, 5, 0, 5, 4, 4, 1, 4, 0, 6, 6, 6, 6, 5, 5, 5, 5, 1, 1 };
            fakeReels[2] = new[] { 6, 5, 6, 6, 0, 3, 3, 4, 3, 10, 1, 1, 5, 5, 1, 5, 2, 2, 2, 0, 6, 6, 3, 6, 3, 3, 6, 3, 5, 5, 0, 5, 4, 4, 1, 4, 0, 6, 6, 6, 6, 5, 5, 5, 5, 1, 1 };
            fakeReels[3] = new[] { 6, 5, 6, 6, 0, 3, 3, 4, 3, 10, 1, 1, 5, 5, 1, 5, 2, 2, 2, 0, 6, 6, 3, 6, 3, 3, 6, 3, 5, 5, 0, 5, 4, 4, 1, 4, 0, 6, 6, 6, 6, 5, 5, 5, 5, 1, 1 };
            fakeReels[4] = new[] { 6, 5, 6, 6, 0, 3, 3, 4, 3, 1, 1, 5, 5, 1, 5, 2, 2, 2, 0, 6, 6, 3, 6, 3, 3, 6, 3, 5, 5, 0, 5, 4, 4, 1, 4, 0, 6, 6, 6, 6, 5, 5, 5, 5, 1, 1 };
            return fakeReels;
        }

        /// <summary>
        /// Vraća niz koeficijenata za id simbola.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static int[] GetSymbolCoefficients(int id)
        {
            var coefficients = new int[5];
            for (var i = 0; i < 5; i++)
            {
                coefficients[i] = WinForLinesGoldLine[id, i];
            }
            return coefficients;
        }

        public static HelpConfigV3<object> GetHelpConfigV3()
        {
            var helpV3 = new HelpConfigV3<object>
            {
                rtp = (decimal?)96.0,
                symbols = GetHelpSymbolConfigV3(),
                lines = GetHelpLineConfigV3()
            };

            return helpV3;
        }

        private static HelpSymbolConfigV3<object>[] GetHelpSymbolConfigV3()
        {
            var symbols = new HelpSymbolConfigV3<object>[8];

            for (var i = 0; i < 8; i++)
            {
                symbols[i] = new HelpSymbolConfigV3<object>
                {
                    id = i == 7 ? 10 : i,
                    features = new[] { HelpSymbolFeatureV3.Regular },
                    extra = new HelpSymbolExtraV3(),
                    coefficients = GetSymbolCoefficients(i == 7 ? 10 : i)
                };
            }
            return symbols;
        }

        public static HelpLineConfigV3[] GetHelpLineConfigV3()
        {
            var lines = new HelpLineConfigV3[11];
            for (var i = 0; i < 11; i++)
            {
                var pos = new int[5];
                for (var j = 0; j < 5; j++)
                {
                    pos[j] = UnicornGlobalData.GameLineShifted[(i + 1) % 11, j] - 1;
                }
                lines[i] = new HelpLineConfigV3 { id = i, positions = pos };
            }

            return lines;
        }

        #endregion
    }
}
